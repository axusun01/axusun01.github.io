[{"title":"Hello World","path":"/2024/07/04/undefined/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"path":"/about/index.html","content":"SafeKiller Zone自我介绍建站初衷&nbsp;&nbsp;我是SafeKiller Zone,身为一名网络安全讲师，对技术充满了无比的热爱和追求。每一天，我都致力于深入探索这个快速发展的领域，不断学习最新的安全策略和防御技术。尽管在这条道路上，我不可避免地会遇到复杂的技术难题，但正是这些挑战，激发了我解决问题的热情，也锻炼了我的技能。我始终相信，每一个问题都是一个机会，一个提升自己的机会，使我能够将学到的宝贵知识传授给我的学生们，并帮助他们在网络安全这个不断演变的领域中取得成功。&nbsp;作为一名对网络安全和运维充满热情的专业人士，我创建这个博客是为了分享我的知识和经验。我希望这个网站能够帮助大家更好地理解网络安全的复杂性，并提供实用的技术指导和行业最佳实践。我热切希望我的博客能够为大家的学习和成长之路添砖加瓦。 博客发展史2019年11 月 29日接触WordPress和Centos部署博客,那时写的文章都偏向于开发和运维····2021年06 月 17日将主题换成了子比的,慢慢的更新更多的文章,水平也慢慢的变高了2022年09 月 22日由于Wordpress是MVC架构,插件也较多容易出现各种漏洞,后面就换成了Hexo博客····2024年01 月 25日争取上架尽可能全的安全运维和Web渗透的wiki···· 2023年年度总结 O1 2024年的小目标：学习技术，挣钱，完善WIKI,出更多的视频 正常 65% KR1 小成就：游戏鉴赏家 通关《博德之门3》通关《杀戮尖塔》AC20带萌新VAN《怪物猎人崛起》单刷《怪物猎人世界》米拉小姐15min左右加5min 已完成 100% KR2 小目标：完成博客的搭建和主要个性化页面设计 黑夜模式欢迎语接入音乐大量的废话 正常 60% KR-3 丰富个人博客网站（我需要更多的前端知识，迫切需要大佬） 接入赞助我……求大佬们打赏接入Steam让大家看看我傲人的游戏时长多写几篇佳作，发布技术文章。嘿！让大家看看 未完成 10% KR4 文章完成情况 后端前端测试运维论文和pptelasticsearch购物搜索的中文提示词该怎么设计？！业务实现了，效率性能呢?十年前的老网站，不入流，且不合适的拼接技术感觉没啥问题啊，哈哈哈，怎么了这是？！一个头两个大前面还堵着呢 延期 90%"},{"path":"/comments/index.html","content":"留言板 &nbsp;&nbsp;你可以在这里留盐，我会找到你的，放心大胆发言，欢迎再来关顾我的小站，就怕一段时间我又消失了，请来提醒我。&nbsp;&nbsp;当然，你可以给我提出一些更好的意见，也可以提携我走入行业深处，教会我更多编程、历史、小说、游戏等方面的知识，因为我还是个超级小白。&nbsp;&nbsp;最后，愿来者都能有所收获！"},{"path":"/css/darkmode.css","content":"#Dark:root { --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --alpha20: rgba(0,0,0,0.2); --alpha50: rgba(0,0,0,0.5); --alpha60: rgba(0,0,0,0.6); --alpha75: rgba(0,0,0,0.75); --alpha100: #000; --sidebar-bg: #383d42; --text: #fff; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333; } @media screen and (max-width: 667px) { #Dark:root { --site-bg: #000; } } #Dark:root { --blur-bg: rgba(0,0,0,0.5); } #Dark .float-panel { --blur-bg: rgba(0,0,0,0.4); } #Dark .tag-plugin.tag { --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e; } #Dark .tag-plugin[color='red'] { --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e; } #Dark .tag-plugin[color='orange'] { --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e; } #Dark .tag-plugin[color='yellow'] { --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e; } #Dark .tag-plugin[color='green'] { --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e; } #Dark .tag-plugin[color='cyan'] { --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1; } #Dark .tag-plugin[color='blue'] { --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1; } #Dark .tag-plugin[color='purple'] { --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1; } #Dark .tag-plugin[color='light'] { --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .tag-plugin[color='dark'] { --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff; } #Dark .tag-plugin[color='warning'], #Dark .tag-plugin[color='light'] { --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .tag-plugin { --theme: var(--text-p1); --theme-border: var(--block-border); --theme-block: var(--block); --theme-codeblock: var(--block); } #Dark .social-wrap a.social:hover { box-shadow: none; } #Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .header p { color: var(--text-p2); } #Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .body { border-radius: 12px; background: var(--alpha50); box-shadow: none; } #Dark a.button.start.gradient { transition: 0.38s ease-out; position: relative; z-index: 0; background: linear-gradient(to right, #4c95fa, #38c9fa, #24f9c4, #24f9c4, #38c9fa, #4c95fa); background-size: 1000%; color: #fff; text-shadow: 0 0 1px rgba(0,0,0,0.12); animation: glow 60s linear infinite; } #Dark .wl-comment.input, #Dark .wl-comment.output{ background-color:#26292c; border-radius:0.75em; border: 1px solid transparent; } /* waline评论样式 */ #Dark .wl-count{ padding: .375em; font-weight: bold; font-size: 1.25em; color: #fff; } #Dark .cmt-body.waline{ --waline-white: #000; --waline-light-grey: #666; --waline-dark-grey: #999; /* 布局颜色 */ --waline-color: #fff; --waline-bgcolor: var(--block); --waline-bgcolor-light: #272727; --waline-border-color: #333; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #272727; /* 其他颜色 */ --waline-info-bgcolor: #272727; --waline-info-color: #666; } #Dark .wl-user-name { color: #999; } /* 不是ai制作标识 */ #Dark #notbyai { content: url(\"/assets/website/Written-By-Human-black.png\"); }"},{"path":"/css/override.css","content":".page-footer .text p { text-align: center; }"},{"title":"朋友文章","path":"/friends/rss/index.html","content":""},{"title":"友链","path":"/friends/index.html","content":"自是因缘而来…… 我的朋友 申请友链 &nbsp;&nbsp;和我建立的友链关系,我会经常关顾您的站点.当你满足下面的条件,你可以直接申请友链,我会及时回应你的请求.&nbsp;&nbsp;不满足,你也可以先申请上,规矩并没有那么死.假如你的站点变成了一个僵尸站(一年以上没有动态也没有文章)或无法正常访问,我会暂时下架你的网站链接,我并不会嫌麻烦.当您的站点恢复时留言即可!&nbsp;&nbsp;最后我希望通过博文的形式丰富自己的学习内容,在一个偏向于技术的圈子里学到更多！ 大陆内能够正常访问. 有实质性原创内容的 HTTPS 站点. 合法的、非营利性、无商业广告、无木马植入. 发布过至少 10 篇原创文章,内容题材:计算机相关. 与 博主 有至少 3 次有效互动(有内容的留言或者 issue 等). 我已满足全部条件,快告诉我如何交换友链！第一步：新建Issue新建 Github Issue按照模板格式填写并提交.为了实现正常预览和提高预览速度,你需要检查提供的图片链接能正常访问,且优化图片大小第二步：添加友链等待我的审核12345&quot;title&quot;: &quot;SafeKiller_Zone&quot;,&quot;url&quot;: &quot;https://jiangjiyue.github.io/&quot;,&quot;avatar&quot;: &quot;https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202401260729165.jpg&quot;,&quot;screenshot&quot;: &quot;https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202402061901753.png&quot;,&quot;description&quot;: &quot;深入网络安全策略与渗透技巧,附简明Linux及Nginx运维实践,助力构建坚实防线.&quot;待管理员审核通过,添加了 active 标签后,回来刷新即可生效.同时请将本站添加到你的友链中：如果您需要更新自己的友链,请直接修改 issue 内容,大约 3 分钟内生效,无需等待博客更新. 关于交友 &nbsp;&nbsp;我认为,建立和维持健康的人际关系,需遵循以下原则：&nbsp;&nbsp;&nbsp;&nbsp;1. 保持诚信和透明度,坦诚相见.&nbsp;&nbsp;&nbsp;&nbsp;2. 尊重个体差异,理解每个人都有独特的价值.&nbsp;&nbsp;&nbsp;&nbsp;3. 倾听比说更重要,了解他人需求.&nbsp;&nbsp;&nbsp;&nbsp;4. 互相支持,特别是在对方需要帮助时.&nbsp;&nbsp;&nbsp;&nbsp;5. 共同成长,勇于面对挑战和解决冲突.&nbsp;&nbsp;&nbsp;&nbsp;6. 庆祝成功,共享快乐时光.&nbsp;&nbsp;&nbsp;&nbsp;7. 维持适当界限,以保护个人隐私和空间."},{"path":"/js/darkmode.js","content":"/** * 监听系统主题 * @type {MediaQueryList} */ var OSTheme = window.matchMedia('(prefers-color-scheme: dark)'); OSTheme.addListener(e => { if (window.localStorage.getItem('Theme_Mode') === 'auto') { ThemeChange('auto'); } }) /** * 自动模式 6:00-18:00-Light 18:00-6:00-Dark,开启后每三十分钟检查一次 */ const AutoMode = (htmlElement) => { var date = new Date(); var hours = date.getHours(); if (hours < 18 && hours >= 6) { document.querySelector(\"html\").id = \"Light\"; } else { document.querySelector(\"html\").id = \"Dark\"; } // if (htmlElement.id === \"Light\") { // 闪瞎你的眼模式（速度快一点的话） // htmlElement.id = \"Dark\"; // } else { htmlElement.id = \"Light\"; } } let autoTimer; /** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */ const ThemeChange = (theme) => { // 清除计时器 clearInterval(autoTimer); // 抽取元素 const htmlElement = document.querySelector(\"html\"); let themeBtnIcon; try { themeBtnIcon = document.querySelector(\"#start > aside > div > footer > div > a:last-child > i\") } catch { // 元素不存在 } if (theme === 'light' || (theme === 'auto' && !OSTheme.matches)) { htmlElement.id = \"Light\"; if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-sun fa-spin fa-spin-reverse'; } } else { htmlElement.id = \"Dark\"; if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-moon fa-fade'; } } if (theme === 'auto') { if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-circle-half-stroke fa-flip'; } AutoMode(htmlElement); autoTimer = setInterval(function () { AutoMode(htmlElement); }, 1000 * 60 * 30); // 半小时一次 } window.localStorage.setItem('Theme_Mode', theme); } /** * 初始化博客主题 */ switch (window.localStorage.getItem('Theme_Mode')) { case 'light': ThemeChange('light'); break; case 'dark': ThemeChange('dark'); break; default: ThemeChange('auto'); } /** * 切换主题模式 */ // 绑定按钮点击事件 try { document.querySelector(\"#start > aside > div > footer > div > a:last-child\").onclick = () => { if (window.localStorage.getItem('Theme_Mode') === 'auto') { hud.toast('🌞白天模式'); ThemeChange('light'); } else if (window.localStorage.getItem('Theme_Mode') === 'light') { hud.toast('🌙 夜间模式'); ThemeChange('dark'); } else { hud.toast('🌞/🌙 自动模式'); ThemeChange('auto'); } } } catch { // 元素不存在 }"},{"title":"蓝队小工具-Kill3r","path":"/tools/index.html","content":"正则匹配周报其他功能取值按钮组转义按钮组匹配按钮组 取IP 取端口 取纯数字 取非空白 取所有字符 &lt; &gt; ( ) [ ] { } - : ; ' \" , . / 所有字符 空白 多空白 多非空白 多字母 多非字母 多数字 多非数字 日期JSON转换 地区聚合 字符格式化 IP去重 IP格式化 推荐直接把原始日志复制到文本框采用选中替换方式比较方便。"},{"path":"/tools/jquery-3.1.1.min.js","content":"/*! jQuery v3.1.1 | (c) jQuery Foundation | jquery.org/license */ !function(a,b){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){\"use strict\";var c=[],d=a.document,e=Object.getPrototypeOf,f=c.slice,g=c.concat,h=c.push,i=c.indexOf,j={},k=j.toString,l=j.hasOwnProperty,m=l.toString,n=m.call(Object),o={};function p(a,b){b=b||d;var c=b.createElement(\"script\");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var q=\"3.1.1\",r=function(a,b){return new r.fn.init(a,b)},s=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,t=/^-ms-/,u=/-([a-z])/g,v=function(a,b){return b.toUpperCase()};r.fn=r.prototype={jquery:q,constructor:r,length:0,toArray:function(){return f.call(this)},get:function(a){return null==a?f.call(this):a1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,\"$1\"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||\"\")||ga.error(\"unsupported lang: \"+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType-1!==c&&1===a.nodeType}))}r.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?r.find.matchesSelector(d,a)?[d]:[]:r.find.matches(a,r.grep(b,function(a){return 1===a.nodeType}))},r.fn.extend({find:function(a){var b,c,d=this.length,e=this;if(\"string\"!=typeof a)return this.pushStack(r(a).filter(function(){for(b=0;b]*|#([\\w-]+))$/,G=r.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||E,\"string\"==typeof a){if(e=\"\"===a[a.length-1]&&a.length>=3?[null,a,null]:F.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof r?b[0]:b,r.merge(this,r.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),B.test(e[1])&&r.isPlainObject(b))for(e in b)r.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):r.isFunction(a)?void 0!==c.ready?c.ready(a):a(r):r.makeArray(a,this)};G.prototype=r.fn,E=r(d);var H=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};r.fn.extend({has:function(a){var b=r(a,this),c=b.length;return this.filter(function(){for(var a=0;a1&&(I[a]||r.uniqueSort(e),H.test(a)&&e.reverse()),this.pushStack(e)}});var K=/[^\\x20\\t\\r \\f]+/g;function L(a){var b={};return r.each(a.match(K)||[],function(a,c){b[c]=!0}),b}r.Callbacks=function(a){a=\"string\"==typeof a?L(a):r.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h-1)f.splice(c,1),c-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c=\"\",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=\"\"),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function M(a){return a}function N(a){throw a}function O(a,b,c){var d;try{a&&r.isFunction(d=a.promise)?d.call(a).done(b).fail(c):a&&r.isFunction(d=a.then)?d.call(a,b,c):b.call(void 0,a)}catch(a){c.call(void 0,a)}}r.extend({Deferred:function(b){var c=[[\"notify\",\"progress\",r.Callbacks(\"memory\"),r.Callbacks(\"memory\"),2],[\"resolve\",\"done\",r.Callbacks(\"once memory\"),r.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",r.Callbacks(\"once memory\"),r.Callbacks(\"once memory\"),1,\"rejected\"]],d=\"pending\",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},\"catch\":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return r.Deferred(function(b){r.each(c,function(c,d){var e=r.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=e&&e.apply(this,arguments);a&&r.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+\"With\"](this,e?[a]:arguments)})}),a=null}).promise()},then:function(b,d,e){var f=0;function g(b,c,d,e){return function(){var h=this,i=arguments,j=function(){var a,j;if(!(b=f&&(d!==N&&(h=void 0,i=[a]),c.rejectWith(h,i))}};b?k():(r.Deferred.getStackHook&&(k.stackTrace=r.Deferred.getStackHook()),a.setTimeout(k))}}return r.Deferred(function(a){c[0][3].add(g(0,a,r.isFunction(e)?e:M,a.notifyWith)),c[1][3].add(g(0,a,r.isFunction(b)?b:M)),c[2][3].add(g(0,a,r.isFunction(d)?d:N))}).promise()},promise:function(a){return null!=a?r.extend(a,e):e}},f={};return r.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+\"With\"](this===f?void 0:this,arguments),this},f[b[0]+\"With\"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(a){var b=arguments.length,c=b,d=Array(c),e=f.call(arguments),g=r.Deferred(),h=function(a){return function(c){d[a]=this,e[a]=arguments.length>1?f.call(arguments):c,--b||g.resolveWith(d,e)}};if(b0||Q.resolveWith(d,[r]))}}),r.ready.then=Q.then;function R(){d.removeEventListener(\"DOMContentLoaded\",R), a.removeEventListener(\"load\",R),r.ready()}\"complete\"===d.readyState||\"loading\"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(r.ready):(d.addEventListener(\"DOMContentLoaded\",R),a.addEventListener(\"load\",R));var S=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===r.type(c)){e=!0;for(h in c)S(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,r.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(r(a),c)})),b))for(;h1,null,!0)},removeData:function(a){return this.each(function(){W.remove(this,a)})}}),r.extend({queue:function(a,b,c){var d;if(a)return b=(b||\"fx\")+\"queue\",d=V.get(a,b),c&&(!d||r.isArray(c)?d=V.access(a,b,r.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||\"fx\";var c=r.queue(a,b),d=c.length,e=c.shift(),f=r._queueHooks(a,b),g=function(){r.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return V.get(a,c)||V.access(a,c,{empty:r.Callbacks(\"once memory\").add(function(){V.remove(a,[b+\"queue\",c])})})}}),r.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length"},{"path":"/tools/script.js","content":"function removeDuplicates() { // 从 input框 获取内容 var input = document.getElementsByClassName('input')[0]; var output = document.getElementsByClassName('output')[0]; var content = input.value.trim(); // 移除内容前后的空白 // 假设内容为逐行分隔的值，先将其分割成数组，并移除空行 var contentArray = content.split(' ').filter(item => item.trim() !== ''); // 移除非IP行，使用正则表达式匹配标准的IPv4地址 var ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/; var validContentArray = contentArray.filter(item => ipRegex.test(item)); // 计算去重前的数据量 var beforeCount = validContentArray.length; // 使用 Set 去除数组中的重复项 var uniqueContentArray = [...new Set(validContentArray)]; // 计算去重后的数据量 var afterCount = uniqueContentArray.length; // 计算去重的数据量 var removedCount = beforeCount - afterCount; // 生成更新信息 var updateInfo = `去重前的数据量: ${beforeCount} 去重后的数据量: ${afterCount} 去重的数据量: ${removedCount} `; // 将去重后的数组内容再次转换为逐行分隔的字符串 var uniqueContent = uniqueContentArray.join(' '); // 更新 output 的内容，加上去重信息 output.value = updateInfo + uniqueContent; } function sumOccurrencesByCountry() { const countryList = [ '阿富汗', '阿尔巴尼亚', '阿尔及利亚', '安道尔', '安哥拉', '安提瓜和巴布达', '阿根廷', '亚美尼亚', '澳大利亚', '奥地利', '阿塞拜疆', '巴哈马', '巴林', '孟加拉国', '巴巴多斯', '白俄罗斯', '比利时', '伯利兹', '贝宁', '不丹', '玻利维亚', '波黑', '博茨瓦纳', '巴西', '文莱', '保加利亚', '布基纳法索', '布隆迪', '柬埔寨', '喀麦隆', '加拿大', '佛得角', '中非', '乍得', '智利', '中国', '哥伦比亚', '科摩罗', '刚果（布）', '刚果（金）', '哥斯达黎加', '克罗地亚', '古巴', '塞浦路斯', '捷克', '丹麦', '吉布提', '多米尼克', '多米尼加', '东帝汶', '厄瓜多尔', '埃及', '萨尔瓦多', '赤道几内亚', '厄立特里亚', '爱沙尼亚', '斯威士兰', '埃塞俄比亚', '斐济', '芬兰', '法国', '加蓬', '冈比亚', '格鲁吉亚', '德国', '加纳', '希腊', '格林纳达', '危地马拉', '几内亚', '几内亚比绍', '圭亚那', '海地', '洪都拉斯', '匈牙利', '冰岛', '印度', '印度尼西亚', '伊朗', '伊拉克', '爱尔兰', '以色列', '意大利', '牙买加', '日本', '约旦', '哈萨克斯坦', '肯尼亚', '基里巴斯', '韩国', '科威特', '吉尔吉斯斯坦', '老挝', '拉脱维亚', '黎巴嫩', '莱索托', '利比里亚', '利比亚', '列支敦士登', '立陶宛', '卢森堡', '马达加斯加', '马拉维', '马来西亚', '马尔代夫', '马里', '马耳他', '马绍尔群岛', '毛里塔尼亚', '毛里求斯', '墨西哥', '密克罗尼西亚', '摩尔多瓦', '摩纳哥', '蒙古', '黑山', '摩洛哥', '莫桑比克', '缅甸', '纳米比亚', '瑙鲁', '尼泊尔', '荷兰', '新西兰', '尼加拉瓜', '尼日尔', '尼日利亚', '北马其顿', '挪威', '阿曼', '巴基斯坦', '帕劳', '巴勒斯坦', '巴拿马', '巴布亚新几内亚', '巴拉圭', '秘鲁', '菲律宾', '波兰', '葡萄牙', '卡塔尔', '罗马尼亚', '俄罗斯', '卢旺达', '圣基茨和尼维斯', '圣卢西亚', '圣文森特和格林纳丁斯', '萨摩亚', '圣马力诺', '圣多美和普林西比', '沙特阿拉伯', '塞内加尔', '塞尔维亚', '塞舌尔', '塞拉利昂', '新加坡', '斯洛伐克', '斯洛文尼亚', '所罗门群岛', '索马里', '南非', '南苏丹', '西班牙', '斯里兰卡', '苏丹', '苏里南', '瑞典', '瑞士', '叙利亚', '塔吉克斯坦', '坦桑尼亚', '泰国', '多哥', '汤加', '特立尼达和多巴哥', '突尼斯', '土耳其', '土库曼斯坦', '图瓦卢', '乌干达', '乌克兰', '阿联酋', '英国', '美国', '乌拉圭', '乌兹别克斯坦', '瓦努阿图', '梵蒂冈', '委内瑞拉', '越南', '也门', '赞比亚', '津巴布韦', '亚太地区', '欧盟' ]; const countryOccurrences = {}; // 获取输入文本框 var input = document.getElementsByClassName('input')[0]; // 处理输入内容 var content = input.value.trim(); var lines = content.split(' ').map(item => item.trim()); // 将输入文本按行分割并移除每行前后的空白 lines = lines.filter(line => line !== ''); // 去除空行 lines.shift(); // 删除第一行 // 遍历每行数据 lines.forEach(line => { var matchingCountry = countryList.find(country => line.includes(country)); // 在国家列表中查找与国家名称匹配的国家 if (matchingCountry) { if (!countryOccurrences[matchingCountry]) { countryOccurrences[matchingCountry] = 0; } countryOccurrences[matchingCountry]++; // 统计国家出现的次数 } else { // 如果没有匹配到任何国家，那么将其归类到'其他' var otherKey = '其他'; if (!countryOccurrences[otherKey]) { countryOccurrences[otherKey] = 0; } countryOccurrences[otherKey]++; } }); // 将结果转换成字符串形式并显示 var output = Object.entries(countryOccurrences) .sort((a, b) => b[1] - a[1]) // 按出现次数降序排序 .map(([country, count]) => `${country}\\t${count}`) .join(' '); // 获取输出文本框并将结果赋值 var resultOutput = document.getElementsByClassName('output')[0]; resultOutput.value = output; } function formatThreats() { var input = document.getElementsByClassName('input')[0]; var output = document.getElementsByClassName('output')[0]; // 分割输入成单行 var content = input.value.trim(); // 移除内容前后的空白 var lines = content.split(' ').map(item => item.trim()); // 移除每个元素前后的空白 lines = lines.filter(line => line !== ''); // 去除空行 // 移除总计行 lines.pop(); // 将每行数据转换为描述文本 var descriptions = lines.map((line, index) => { // 分割行为事件和次数 var parts = line.split('\\t'); var threat = parts[0].trim(); var count = parseInt(parts[1], 10); // 格式化描述，最后一个事件后面不加逗号 // 移除了事件和次数之间的空格 return `${threat}${index === lines.length - 1 ? '' : ''}${count}次`; }); // 加入描述文本间的连接词 output.value = descriptions.join('、'); } function parseIpAndOutput() { var input = document.getElementsByClassName('input')[0]; var output = document.getElementsByClassName('output')[0]; // 定义输出文本区域 var outputText = ''; // 分割输入文本为多行 var lines = input.value.split(' '); // 遍历每一行 lines.forEach(function (line) { // 使用正则表达式匹配IP地址和端口号 var match = line.match(/([\\d.]+)\\s+(\\d+)/); if (match) { // 获取IP地址和端口号 var ip = match[1]; var port = match[2]; // 格式化为'IP:端口'的形式 var result = ip + ':' + port; // 添加到输出文本 outputText += result + ' '; } }); // 将结果写入输出文本区域 output.value = outputText; } function generateTable() { var input = document.getElementsByClassName('input')[0]; var output = document.getElementsByClassName('output')[0]; // 解析JSON数据 var jsonData = JSON.parse(input.value); // 获取日期数据 var dates = jsonData.data.dataName; // 获取外部攻击数据 var externalAttacks = jsonData.data.dataValue[0].value; // 获取入侵主机数据 var intrusionHosts = jsonData.data.dataValue[1].value; // 创建表格头部 var table = \"时间\\t外部攻击\\t入侵主机 \"; // 遍历日期数据并生成表格内容 for (var i = 0; i < dates.length; i++) { var row = dates[i] + \"\\t\" + externalAttacks[i] + \"\\t\" + intrusionHosts[i] + \" \"; table += row; } output.value = table; } $(document).ready(function () { // 使用事件委托简化代码 $('.button-group').on('click', 'button.insert-btn', function () { var pattern = $(this).data('pattern'); insertText(pattern); }); // 将插入文本的逻辑抽象到一个函数中 function insertText(text) { var textarea = $('.output')[0]; // 选择第一个匹配的textarea元素 // 标准浏览器及IE9+ if (textarea.selectionStart || textarea.selectionStart === '0') { var startPos = textarea.selectionStart; var endPos = textarea.selectionEnd; textarea.value = textarea.value.substring(0, startPos) + text + textarea.value.substring(endPos, textarea.value.length); textarea.focus(); textarea.selectionStart = startPos + text.length; textarea.selectionEnd = startPos + text.length; // IE8及以下 } else if (document.selection) { textarea.focus(); var sel = document.selection.createRange(); sel.text = text; textarea.focus(); } else { textarea.value += text; textarea.focus(); } } // 绑定测试匹配按钮的点击事件 $('.parseIpAndOutput').click(parseIpAndOutput); // 周报 $('.generateTable').click(generateTable); $('.sumOccurrencesByCountry').click(sumOccurrencesByCountry); $('.formatThreats').click(formatThreats); $('.removeDuplicates').click(removeDuplicates); });"},{"path":"/tools/style.css","content":"/* 按钮组样式 */ .button-group { margin-bottom: 20px; } button { background-color: #008CBA; /* 按钮背景颜色 */ color: white; /* 文字颜色 */ padding: 10px 15px; /* 内边距 */ border: none; /* 去除边框 */ border-radius: 5px; /* 圆角边框 */ cursor: pointer; /* 鼠标悬停时的光标形状 */ font-size: 16px; /* 文字大小 */ margin: 5px; /* 外边距 */ transition: background 0.3s; /* 过渡效果 */ } button:hover { background-color: #005f73; /* 按钮悬停时的背景颜色 */ } /* 文本域样式 */ .output, .input { width: calc(100% - 40px); /* 宽度为100%，减去padding */ margin-bottom: 20px; padding: 10px; /* 内边距 */ border: 1px solid #ddd; /* 边框 */ border-radius: 5px; /* 圆角边框 */ font-size: 16px; /* 字体大小 */ background-color: #fff; /* 背景颜色 */ resize: vertical; /* 只允许垂直缩放 */ } .output[contenteditable=\"true\"], .input[contenteditable=\"true\"] { height: 200px; /* 设置高度 */ overflow-y: scroll; /* 添加滚动条 */ outline: none; /* 移除焦点时的边框 */ -webkit-user-modify: read-write; /* 允许编辑 */ }"}]